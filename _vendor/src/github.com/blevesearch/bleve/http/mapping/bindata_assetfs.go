package mapping

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _mapping_static_js_mapping_analysis_analyzer_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x57\xcd\x8e\xdb\x36\x10\xbe\xef\x53\x70\x85\x20\x96\x11\xc3\x8b\x5e\x6b\xec\x21\x08\x50\xa0\x87\xed\x29\x37\xc3\x08\x18\x71\x64\x13\x96\x48\x95\xa4\x9c\x75\x17\x7e\xf7\x0e\xa9\x3f\x52\x3f\x5e\x79\xb7\x45\x1b\x1d\x6c\x91\x33\xf3\x71\xf8\xcd\x70\xc4\x39\x51\x45\x3e\x0b\x9a\x9d\xff\x02\xf5\x24\x19\xcd\xbe\x18\x95\x91\x47\x92\x96\x22\x31\x5c\x0a\x12\x7f\xd0\x89\x2c\x60\x45\x3e\xe4\x56\xfc\xbb\xd0\x86\x8a\xc4\x8e\x0f\xc6\x14\x2b\x22\x68\x8e\x83\x13\xcd\x4a\xfc\xcb\x69\x51\x70\xb1\x5f\x92\x97\x3b\x82\x4f\x65\xba\x96\x8a\xef\xff\x40\x35\x84\xb5\xda\x1b\x5f\x26\x26\xe6\x41\x29\xa9\x9e\x40\x6b\xba\xb7\xf2\x28\x0a\xa4\xa9\x54\x79\x41\xcd\x61\x28\xa9\x3d\x40\x41\xfd\xb6\xb9\xf3\xc5\xb4\xde\x2a\xca\x5f\x2e\x95\xe1\xc3\x03\x41\xd1\x99\x70\x51\xed\x82\x20\x38\x01\xc6\x0d\x1a\x3b\x05\x3b\x8e\x2d\x4f\xc7\x56\xa7\xd9\x60\x6d\x2f\x00\x18\x61\x00\x05\x02\x3b\x2c\x99\xe2\x9c\x36\x38\x4b\x95\xa2\x67\xdd\x2a\xf3\x94\xc4\x47\xf2\x88\x6e\x27\x07\xaa\xbe\xa5\x3c\x33\xa0\x74\xe4\xe3\xd9\x47\xc0\x0f\x2b\xaf\xc5\xe8\xec\x76\xb7\x09\x14\x5a\x9f\x92\x94\xb7\x5e\xad\x7d\xcc\x3e\xe4\x10\x76\x5d\x94\xfa\x10\x0f\x2d\xb7\x88\xb9\x5b\x86\xeb\x5d\x82\x51\x8f\xcc\xc0\xda\x06\x33\x58\xa6\x03\xba\x10\xc8\x34\x78\x1c\x18\x79\x04\x71\x8d\x04\xa7\x30\x83\x05\xe3\xb3\x10\xa0\x4e\xd0\xe0\x03\xfb\x3c\x04\xb6\x5b\x73\x2b\x11\x81\x79\xc5\x84\xbf\xd2\x80\x8a\x97\x6b\x68\xdb\xe3\x0e\x21\x9c\x5f\xf8\xea\xd9\xde\x55\xbf\x7e\x5e\xbb\x55\x38\x1a\xd9\x73\xd6\x50\xe5\x2b\x64\x92\xb2\xaf\x7d\xa5\xe6\x90\xc7\x3e\x4b\xee\x5c\xaf\x0b\xa9\x4d\xbc\x78\xa0\x05\x7f\xf8\x16\x82\x2f\x56\xcd\x29\x5f\xeb\x32\x49\xf0\x88\xc6\x2d\x0e\xa3\x86\xf6\x19\x9f\xf2\xd0\xea\x76\xb3\x3e\x37\xcb\x75\xfb\xee\xca\x40\x88\xbf\xc2\x23\xc6\x60\x62\x95\x5e\xd9\xb0\xfa\x3e\x70\xf5\x7e\x79\x8d\x9a\x78\x19\x6a\xd8\x6c\xfe\xcd\x85\xf0\x1a\xbd\x5f\x06\x5a\x33\xf9\xed\xc1\xbf\x91\xe0\xa1\x93\x8e\x61\xff\x6c\xfe\xb7\x1c\xf7\xf8\xe9\x93\x4c\x99\xa7\xe1\x93\xe7\xc4\xbe\x2f\x69\xa3\x12\x18\xd2\x04\x27\x3b\xfc\x4d\x50\x73\x6b\x93\x7b\xac\x3a\xa5\x60\x90\x72\x81\xb5\xf9\xe3\x47\xe2\xcd\x47\x83\x02\x54\x3b\xa6\x21\x03\xc4\x66\x9f\xc7\xca\x5d\x55\x3c\xaa\xc1\xb2\x7f\x46\xed\x93\x48\xa1\x65\x66\x19\xd8\xc7\x73\x00\xc7\xf9\x53\x90\xcb\x13\x8c\xf3\xc3\x71\x43\xcf\x41\x86\xcd\xf1\x5b\x17\x19\x4f\xa0\x32\x5e\x91\x5f\xc6\x97\x75\xc7\xf3\xf5\xcc\xff\x3a\x54\xbb\xa5\xb4\xbc\x3f\xf7\x47\xfc\xec\xca\xcb\xff\x23\xfb\xfb\x1c\xfd\x34\xe9\x3f\xfa\x95\x7f\x4b\xda\x8f\x02\xfd\x73\xe9\x3e\xee\xe7\xac\x34\x47\x0a\xbd\xf0\xdc\x48\x7e\x2f\xb0\xff\x02\xf1\x41\x16\xbf\x8b\xf9\xf0\x6a\x74\x85\xfa\x09\x3a\x5e\xe5\x3e\x74\x75\x16\xf9\x89\x6d\x27\xc2\x96\x23\x58\x21\x68\x3b\xd6\x8c\xeb\x9c\x63\x55\x58\x54\x66\x8b\x71\xcc\xef\x25\xcf\xd8\x54\x15\xc2\x0b\x7b\x5e\x6a\x43\x0e\xf4\x04\x84\xba\xd6\x23\x88\xd9\xbd\xd7\x9a\xcc\x2b\x02\x91\xeb\x6e\xb8\x26\x0a\xfe\x2c\xb9\x02\x16\x85\x97\x46\x05\xa6\x54\xc2\x0f\x56\xd0\x3d\x58\x63\xe7\x91\x90\x86\xd0\x4c\x01\x65\x67\xf2\x1d\x48\xa9\x81\x05\x9e\xf9\x3d\xd3\xfd\xe3\xa0\xbd\xc2\xbc\x0a\xbb\xa0\x2a\x2e\x9a\xeb\x36\x40\x7a\xeb\x61\xec\x66\xee\xae\xf9\x80\x38\x4f\x19\x59\x44\xe4\x53\xd0\xbe\x7d\x22\xd1\xa2\xf5\x1b\x9e\xb9\x36\xfa\x26\x02\x40\xe8\x52\x01\x31\x07\x6a\xf0\x07\x69\xc4\x6b\x73\xd3\xbe\x61\x3a\xe7\x85\x14\x20\x8c\xe5\x17\x2f\xc3\xbc\xa3\xa4\xd9\x9d\xd7\xcc\xd9\xa7\xed\x0a\xa8\x6b\xd8\x26\x28\xe9\xef\xbd\x99\xdf\x52\x77\xed\x9e\xb0\xb2\xd2\xb1\x43\xd7\xf2\xdb\xf3\x65\x9c\xf7\x0e\xbf\x91\x6f\x06\x9b\xda\x46\xad\x6d\x64\x0d\xda\x51\xa7\x6a\xb0\xc5\x7c\x6a\xfb\xdd\x70\x3b\x51\x83\x13\xfd\xda\x42\x76\x7e\x6f\xae\x7c\x92\x1d\xc7\xd4\x40\x8d\xbc\x58\x79\xcb\xcc\xfc\x2a\x63\x4c\x31\x5d\xb9\xa9\x03\x56\x87\x1f\x27\x7a\x49\xa1\xcb\xcc\xf4\x08\xeb\x04\xb3\x19\x73\xdb\x08\xab\x44\x92\x49\x0d\x71\x85\xb3\x7c\xe7\x77\x1f\x37\x23\xcd\x01\xd4\x0f\x8e\x0d\x1b\x96\x9f\x22\xa3\xe7\xca\xfa\x4d\xd7\x83\xa6\x5c\x5d\x36\x7f\x07\x00\x00\xff\xff\x94\xda\xd1\xd3\x7b\x11\x00\x00")

func mapping_static_js_mapping_analysis_analyzer_js_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_js_mapping_analysis_analyzer_js,
		"mapping_static/js/mapping/analysis-analyzer.js",
	)
}

func mapping_static_js_mapping_analysis_analyzer_js() (*asset, error) {
	bytes, err := mapping_static_js_mapping_analysis_analyzer_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/js/mapping/analysis-analyzer.js", size: 4475, mode: os.FileMode(420), modTime: time.Unix(1431973886, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_js_mapping_analysis_charfilter_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\x4f\x4f\xe3\x3a\x10\xbf\xf3\x29\x4c\x84\x68\x2a\xaa\xe4\xfe\x2a\x4e\x3c\x3d\xe9\x1d\xd8\x13\xb7\xaa\x42\x26\x99\xb6\x16\x89\x93\xb5\x1d\xa0\x42\x7c\xf7\x1d\xff\x69\x62\xbb\x49\x29\xcb\x6e\x0f\x90\x64\xfe\xff\x66\x3c\xfe\xbd\x50\x41\xee\x76\x54\xfc\xc7\x2a\x05\xe2\xbe\x29\x69\x75\xa7\x44\x45\x6e\xc9\xa6\xe3\x85\x62\x0d\x27\xe9\x95\x2c\x9a\x16\x16\xe4\xaa\xd6\xe2\xff\xb9\x54\x94\x17\xfa\x7d\xa7\x54\xbb\x20\x9c\xd6\xf8\xf2\x42\xab\x0e\xff\xd5\xb4\x6d\x19\xdf\xce\xc9\xfb\x05\xc1\x9f\x35\xcd\x1a\xc1\xb6\x3f\x50\x0d\xdd\x6a\xed\xa5\x2f\xe3\x13\xdf\x41\x88\x46\xdc\x83\x94\x74\xab\xe5\x49\x12\x48\x37\x8d\xa8\x5b\xaa\x76\xc7\x12\x97\x01\x0a\xdc\xd3\xf2\xc2\x17\x17\x58\xec\xc6\x14\x8b\x1a\xef\x1f\xd6\x34\xcf\x09\x0a\xf7\x84\x71\x5b\x07\x41\xf7\x04\x4a\xa6\xd0\xdc\x28\xe8\xf7\x54\x63\xf5\xdc\xeb\x1c\x4a\x1c\xf5\xbd\x7a\x5e\xa3\x7b\xa3\x87\x8f\x36\xc8\x47\x90\x47\xc7\x9f\x79\xf3\xca\x07\xec\x1f\xf6\x2d\x3c\x40\xdd\x56\x54\x99\x7a\x73\x84\x59\xb1\x22\x6f\xa9\x50\x8c\x56\x32\xa7\x9c\x56\x7b\xc9\x64\x3e\x84\x91\xf9\x16\x38\x08\x56\x64\x3b\x55\x57\x21\x0e\xc5\xa8\x67\xa9\xab\xee\xf3\x4e\x04\x6c\xe1\xad\x4d\xfe\x39\x37\x9c\xd5\xb7\xd1\x16\xb6\xaa\x13\x41\xff\x85\x0d\xed\x2a\x35\x15\xf3\x30\x61\xa9\x0f\xa5\xfe\x09\x50\x9d\xe0\xd1\xc7\x28\x5f\x17\x3e\x92\x62\x8d\x05\x18\x71\x20\x75\x49\xda\x2e\xb8\x0f\xd3\x69\xeb\x7c\x57\x6b\xa7\xd1\xb5\x25\xc2\x76\x77\xa4\x30\x9a\xbc\x39\x11\xd9\x16\x54\x3a\xcb\x69\xcb\xf2\xc7\xc8\xf1\x6c\x9e\xc9\xae\x28\x70\xa8\xd3\xde\x1e\xdd\xd3\x18\x80\xc9\xb4\xb4\xb2\xf9\xfc\x68\x3b\xf2\xa8\xb4\xc0\xab\x6e\x9e\xf5\xcf\xe6\x00\x85\x71\x16\x38\xe6\x25\x4c\x44\x8b\x0e\x9c\xd6\xf7\x1d\x2f\x03\xe0\x46\x61\x49\xe7\x4e\xca\x36\x24\xbd\x3c\x3a\x14\x99\x4e\xd6\x0f\x5e\xda\xf9\xd0\xb6\x7a\xe2\x5d\x73\x87\xa0\xda\xcd\xc9\xc1\x5a\x79\x1e\xd6\x27\x40\xec\x0f\xfc\xf9\xde\xd2\x79\x3c\x33\x06\xd3\x4a\xc2\x19\x61\xde\x8f\x06\x6e\x54\xd3\x00\xa2\xa1\x1e\xe2\x0e\x76\x17\x83\xf1\xf1\xce\x3b\x7d\xc6\x57\xe3\x91\xd6\xa7\x86\x1e\x5b\xc9\x4d\xdf\x47\x07\x9b\xc3\xab\xeb\xd2\xb8\xeb\xaf\xf4\x6c\x22\xb9\xef\xb7\x6f\xc2\x71\xd0\xc9\xbf\xd4\x41\x87\xcf\x19\x30\x7c\xda\xa4\x09\x1c\xfe\x40\xf3\xcf\x01\xc1\x0b\x73\xf2\x86\xfa\x6c\xa1\x6a\x86\x10\xb2\x88\x60\x4f\x06\x4c\x22\x2b\x99\xac\x19\xee\xc4\x99\x35\x9b\x45\xbb\xc6\xf9\x7c\xea\x58\x55\x4e\x0d\x28\xde\xe0\x75\x27\x15\xd9\xd1\x17\x20\xd4\xb0\x89\xa0\x17\x97\x1e\xdb\x38\x6f\xff\x25\x86\xb0\x30\x89\xb7\xd1\xcf\x8e\x09\x28\xbd\xc5\xa4\x7f\xf6\x92\xf2\x71\xf0\x93\x31\xac\xc6\x64\xc4\x1b\x45\x68\x25\x80\x96\x7b\xf2\x04\xa4\x93\x50\x8e\x4d\x89\x31\xb8\xbc\x3d\x62\x4c\xd7\xd7\x11\xb1\xc9\x0e\x17\xb3\x7f\x0f\xf4\x5d\xd7\x6e\xa6\x46\x28\x2e\x50\x77\x96\x16\x7a\xde\xdd\xd8\x6b\xe3\x92\xcc\x12\x72\x13\x90\xb3\x1b\x92\xcc\xfa\x12\xe0\x8d\x49\x25\xbf\x84\x05\x70\xd9\x09\x20\x6a\x47\x15\xfe\x41\x44\xf1\xb4\x1c\xc8\x19\x5e\x48\x75\xdb\x70\xe0\x4a\x43\x8d\x84\x89\x0d\xe8\x0c\x03\x2e\xa3\x13\xe9\x49\x82\xc2\xc7\xf6\xd3\x60\x85\x87\x43\xdd\xf7\xec\x30\x84\x28\x39\xa0\x8a\xe4\x61\x84\x77\xf8\x50\xa3\x86\x17\x3f\xe4\x19\x03\x02\xcb\x88\x14\xb4\x8d\xec\x59\x81\x29\x13\x0f\x91\x4b\x66\xb6\xf0\x32\x3b\x93\x21\x20\xac\x38\x3c\x4c\x39\xcc\x0e\x94\x89\xa9\xa8\x2f\x12\x37\x63\x04\xde\x20\xf8\x02\x76\xa6\x90\xf0\xd4\x16\x55\x23\x21\xb5\x9e\xe6\xdf\xa4\x20\x58\x4e\xa3\x76\x20\x5e\x19\x2e\x26\x5c\x07\xb8\x63\xf6\xd6\xfa\xb7\x98\xca\x61\x7d\x7c\x2c\x7f\x05\x00\x00\xff\xff\xe0\xe8\x40\x52\xe0\x0c\x00\x00")

func mapping_static_js_mapping_analysis_charfilter_js_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_js_mapping_analysis_charfilter_js,
		"mapping_static/js/mapping/analysis-charfilter.js",
	)
}

func mapping_static_js_mapping_analysis_charfilter_js() (*asset, error) {
	bytes, err := mapping_static_js_mapping_analysis_charfilter_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/js/mapping/analysis-charfilter.js", size: 3296, mode: os.FileMode(420), modTime: time.Unix(1431973886, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_js_mapping_analysis_tokenfilter_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x58\x51\x8f\xe2\x36\x10\x7e\xbf\x5f\xe1\x45\xa7\x03\x74\x88\x54\x5b\xdd\x4b\xd1\x3d\x5d\x55\xa9\x0f\xdb\x27\xde\x10\x42\xbe\xc4\x80\x45\x62\xa7\xf6\x64\x77\xe9\x8a\xff\xde\x71\x12\x12\x3b\x71\x20\xc9\x6e\xd5\x7d\xb8\x03\x66\xe6\x9b\xf1\x37\xe3\xf1\xd8\xcf\x54\x91\xb5\x3c\x31\xf1\x07\x8f\x81\xa9\x27\x19\xd1\xf8\x07\xa8\x98\x7c\x27\xfb\x4c\x84\xc0\xa5\x20\xb3\xcf\x3a\x94\x29\x5b\x90\xcf\x89\x11\xff\x29\x34\x50\x11\x9a\xef\x47\x80\x74\x41\x04\x4d\xf0\xcb\x33\x8d\x33\xfc\x2f\xa1\x69\xca\xc5\x61\x4e\xde\x3e\x11\xfc\x2b\x4c\x97\x52\xf1\xc3\x5f\xa8\x86\xb0\x46\x7b\x65\xcb\x44\xc7\xef\x4c\x29\xa9\x9e\x98\xd6\xf4\x60\xe4\x93\x89\x23\xdd\x4b\x95\xa4\x14\x8e\x6d\x49\x19\x01\x0a\xca\x4f\xab\x4f\xb6\x18\xcc\x6a\xf7\xf9\x6a\x51\xe5\xed\x52\xd8\x06\x01\x41\xe9\x99\x70\x51\x2c\x84\x20\x3e\x61\x11\x07\xb4\xcf\x15\xcc\xf7\x99\x61\xeb\x54\xe9\x5c\xd7\xe8\x07\xdf\x9c\xb6\x88\x9f\x2b\xe2\xc7\xc2\xcb\xa5\x1d\xc9\x13\x4d\x0d\x31\x1a\x75\x37\x5b\x37\xd2\x58\xd2\x68\xdd\xd0\xb9\x26\x65\xe6\x38\x37\x79\x58\xa6\x52\xc3\x6c\x1a\xd0\x94\x07\x3b\x07\x7a\xba\xb8\x26\x65\xa9\xb3\x30\x44\x46\x67\x15\x4c\x44\x81\xda\x50\x37\xc2\x33\xaa\xc5\x8f\x3b\xc4\xd3\xab\xca\xe6\x32\x5f\x56\x9f\xf3\xa4\xb9\xf0\x0b\x64\x36\x62\x1d\x4e\x1a\x49\x36\xfa\x36\x70\x49\xdb\x1d\x5e\x66\x73\x57\x21\x13\x27\x21\x5f\x84\x55\xd7\xeb\x73\xca\xd6\x2c\x49\x63\x0a\x79\x2d\x05\x58\xc2\xc0\xc3\x20\xa5\x0a\x38\x8d\x75\x40\x05\x8d\xcf\x9a\xeb\xc0\xca\xa0\x0e\x0e\x4c\x30\xc5\xc3\xe5\x11\x92\xd8\x2d\x32\xf0\x63\x1b\x9e\xea\x75\x4e\x22\x1e\xc2\x2e\x94\x49\x2a\x33\x11\x4d\x7e\xeb\xed\xd7\xb1\x2b\xbc\x2f\x6a\x54\x16\x1d\xd8\x4e\x1c\x14\x4d\x06\x40\xd6\x46\x6d\xbc\x98\x6b\x4c\xd6\x10\xb0\xc2\xa2\x85\x74\x62\xe7\x17\xa9\x22\xac\x0f\x75\x62\x6a\x00\xa0\x6b\xd8\xc2\x8d\x99\x38\xc0\x71\x00\x5e\x61\xd0\xc2\x19\x4a\x9a\x9f\x2f\x81\xad\x87\xc6\xfc\x1f\xb6\xcb\x04\x37\xb5\x3d\x04\xb1\x69\xdb\x42\xd7\x47\xdc\xa9\xf1\x10\xcc\xd2\xa2\x8d\x04\x32\x2d\x3a\x81\x1e\x82\x56\x5b\xb5\x10\x41\xe1\xc6\xc6\x32\x2f\xe4\x03\x40\x5d\x43\x1b\xf7\x72\x6b\x5b\xfd\xce\xf6\x34\x8b\xe1\xce\xae\xf2\xf6\x44\xf3\xa7\x18\x64\x4a\x34\x7e\xac\x21\xaa\x5e\x86\x18\xbe\x9e\xb7\xf9\x65\xeb\x58\x5e\xac\xce\xd4\xb5\x1d\x47\xc4\x62\xec\x0d\x95\x7b\x25\x05\x58\x6c\x57\x0a\x09\x37\x54\xff\xea\x93\xd0\xd7\xb6\xa4\x2b\xcc\x6a\x97\x8f\x88\xd1\x64\x37\x8c\x99\xfe\x28\xce\x5a\x8d\x62\x44\x4c\x25\xc6\x87\xc5\x54\x35\x99\x11\xb1\xdc\x4b\xd1\xe3\xb7\x6f\x7d\x42\x78\x47\x15\xdd\x2d\x92\x5e\xfe\x3d\x9d\x6d\x44\x2c\x66\x36\x33\x15\x2d\xf6\xe1\xa4\x8f\xdb\xba\xe5\x8d\x5e\xf8\x63\x37\xf5\x1e\x89\xcc\x20\xcd\x60\x67\xa6\x52\x8e\xfd\xca\x38\xc6\xde\xc5\x3c\x9a\x9a\x61\x67\xa3\x20\xf3\xc3\xcc\xb7\x39\xb1\xc3\xc5\xc5\x51\xd7\x6f\xa9\x4e\x4f\x1e\xb1\xdc\x1a\xe0\xfd\x15\xdf\x6a\xe7\x23\xe2\xa9\x76\xcd\xe3\xbd\x0a\xbf\x78\xe6\xf0\xba\xd5\x3b\x03\x70\x96\xe2\x20\xc8\xd6\x6d\x8d\x1b\xe3\xef\x81\xb9\xd3\xaf\x65\x38\x1d\x31\xf8\xba\x7e\xad\xd9\xb7\x38\xd2\x76\x60\x24\xff\xc3\x0c\xec\xa7\xa6\x9a\x80\xf9\x9e\xcc\x1e\xda\x97\x91\xa5\x09\xd7\x76\x1f\x15\x27\xab\x31\x36\xf3\x70\x99\xc5\xda\xad\xc1\xb9\x7d\x26\x6f\x2c\x88\xed\x2d\x26\xab\xbb\xd6\x00\xbc\xd9\xdc\x62\xa0\x26\x16\xf7\x68\x1f\x47\x6f\x17\x9f\x75\x07\x2b\x86\xf1\xda\xf3\xf5\x9e\x66\x19\x58\x37\xcd\x3b\xc3\xff\xa6\xc3\xc5\xf6\x66\xe5\xff\x38\x52\x91\x27\xde\x5b\xdc\x82\xbd\x94\x49\xea\x00\x1f\x94\xb3\xae\x00\x3f\x22\x7f\x5d\xd8\x4e\x2e\xff\xb3\x1c\x96\x3c\xf5\x61\xe3\x7e\xbe\x3a\xe8\xf8\x90\x4a\xe8\x43\x45\xdb\xd1\xed\x2b\x6d\x93\xaa\x46\xab\x0d\xcd\x73\x8d\xfb\xa4\xe3\xf4\x4f\xe7\x59\x67\x19\x71\x9d\x70\x6c\x95\xd3\xc2\x6c\xea\xbf\x84\xff\xcc\x78\x1c\x75\x15\x6d\x10\x90\x24\xd3\x40\x8e\xf4\x99\x11\x9a\x3f\xed\x38\x79\x79\xb0\x9e\x7e\xfa\x35\xc5\x49\xfe\x7a\xc4\x35\x9e\x44\x7f\x67\x5c\xb1\xc8\xea\x55\xe6\xaf\x38\xa0\x6c\x1e\xec\x60\xf2\x27\xa6\x3c\x22\x21\x81\xd0\x58\x31\x1a\x9d\xc9\x4f\x46\x32\xcd\x22\x5f\xc5\xe4\x06\x0f\xdf\x5b\xcf\x57\x5f\xbe\x34\x5e\x99\x96\xd7\xfb\x8e\x73\x3a\x54\xf9\x37\x38\x5d\xd5\xd4\x5c\x61\x9e\x5b\x52\x6e\x00\x63\x18\x91\xe9\x84\x7c\x75\x9e\xc9\xbe\x92\xc9\xb4\x8a\x9f\xbd\x72\x0d\x7a\x10\x11\x38\x76\x64\x8a\x11\x38\x52\xc0\x7f\x90\x4e\xdc\x36\xd7\x67\x32\x92\x5f\xa9\x04\x13\x60\x78\x7e\xc6\x39\xb0\xa6\xc6\xbe\xcc\x35\x36\xa7\x2d\x72\x96\xed\x6d\x59\x96\x1d\xd3\xf0\x54\x3d\xd5\xb9\x0c\x4d\xae\xac\xe2\x5c\xe1\x99\x39\x1c\xaa\x51\xc5\x0e\xc1\x33\xa2\xd5\x6f\x56\xf5\xb8\xd4\x91\x3e\xa3\xe4\x8e\x31\x35\x91\xab\xc6\xc0\x61\xbf\xb7\xe5\x6c\xe1\x46\x2c\x17\x34\x5d\x58\xab\xeb\x39\x7c\x60\x76\xb0\x00\x39\x94\xd4\x5f\x47\x2e\x0e\x8d\xf4\x6a\x6c\xb6\x8d\x14\xd4\x82\x21\x09\xc8\x57\xe2\x6e\xfd\x30\x96\x9a\xcd\x0a\xa8\xf9\x3b\x87\x1b\x5c\x8f\x84\x23\x53\x2f\x1c\xbb\x1c\xf6\x14\x6c\x54\xe7\xc2\x7a\xd4\x0c\x74\xed\x41\x97\xd5\xbf\x01\x00\x00\xff\xff\xd0\xf2\x8a\xf4\xb3\x16\x00\x00")

func mapping_static_js_mapping_analysis_tokenfilter_js_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_js_mapping_analysis_tokenfilter_js,
		"mapping_static/js/mapping/analysis-tokenfilter.js",
	)
}

func mapping_static_js_mapping_analysis_tokenfilter_js() (*asset, error) {
	bytes, err := mapping_static_js_mapping_analysis_tokenfilter_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/js/mapping/analysis-tokenfilter.js", size: 5811, mode: os.FileMode(420), modTime: time.Unix(1431973886, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_js_mapping_analysis_tokenizer_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x57\xcd\x6e\xe3\x36\x10\xbe\xef\x53\x30\xc2\x62\x2d\x63\x05\x09\xbd\xd6\xd8\xd3\xb6\x87\x1e\xd2\x93\x6f\x86\xb1\xe0\x4a\x63\x8b\x88\x44\xa9\x24\x15\xc7\x0d\xfc\xee\x1d\x52\x7f\xa4\x4c\xc9\x4e\x82\x62\x7d\x48\x24\xcd\xcc\x37\xff\xc3\xe1\x33\x15\x64\x5b\x3d\x01\x67\xff\x82\x78\xac\x32\x5a\x7c\x57\xa2\x20\xdf\xc8\xa1\xe1\xa9\x62\x15\x27\xe1\x67\x99\x56\x35\x44\xe4\x73\xa9\xc9\x7f\x71\xa9\x28\x4f\xf5\x7b\xae\x54\x1d\x11\x4e\x4b\x7c\x79\xa6\x45\x83\xff\x4a\x5a\xd7\x8c\x1f\xd7\xe4\xf5\x13\xc1\x5f\x2b\x1a\x57\x82\x1d\xff\x46\x36\x84\xd5\xdc\x1b\x9b\xc6\x67\xbe\x83\x10\x95\x78\x04\x29\xe9\x51\xd3\x83\xc0\xa1\x1e\x2a\x51\xd6\x54\xe5\xd7\x94\xce\x02\x24\x74\x4f\x9b\x4f\x36\x59\xf5\xbe\x22\xc3\xeb\xa5\x95\x4c\x12\x82\xb4\x33\x61\xbc\x75\x83\x20\x3a\x81\x8c\x29\x94\x36\x0c\xfa\x3d\xd4\x91\x7a\x1a\x78\x7a\x0f\x7d\xd0\xbb\xa7\x3d\xa2\x1b\x36\x7c\x6c\x75\x5c\xfc\x56\xe8\xa8\x48\x64\xde\xed\x5d\x33\x8b\x8a\x66\xdb\x29\x53\x9f\x92\xd0\x51\xae\xb3\x10\xd7\x95\x54\xe1\x2a\xa1\x35\x4b\x7e\xb8\xe0\xab\xa8\xcf\x49\x2c\x9b\x34\xc5\x80\x86\x03\x4e\x46\x15\xb5\xb1\x96\x2c\xd4\xbc\xe3\x57\xb9\x19\x84\x2e\xeb\x78\x78\x36\x49\x73\xf1\x23\x8c\x6d\x06\x33\x5a\x26\x49\xd6\xfc\x36\x70\x17\xba\x5b\xa1\x09\xd7\x2e\x47\xc3\x9f\x78\x75\xe2\x03\xd3\xf6\x5c\xc3\x16\xca\xba\xa0\xca\x94\x52\x82\x15\xac\x58\x9a\xd4\x54\x28\x46\x0b\x99\x50\x4e\x8b\xb3\x64\x32\x19\xfd\x4b\x8e\xc0\x41\xb0\x34\xce\x55\x59\xb8\x15\xa6\x7c\xb8\x3a\x44\xa3\x8b\x81\x80\x23\xbc\xd4\xc1\xef\x77\x2a\x6b\xd9\x5b\x5d\xd1\x88\x02\x2f\x29\xd4\x3a\x92\x77\x03\x0d\x12\x2d\x56\x1f\xbf\x39\xeb\xff\x80\x03\x6d\x0a\x35\x67\xbc\xb7\xe0\xf4\x4f\x80\x6a\x04\x9f\x7c\x9c\x38\x1e\x38\xc4\x8b\x95\xd7\x19\x0f\xdf\xa1\x6d\x10\x97\x28\xbf\xdb\x47\xd7\x1c\x83\xbb\xda\xa4\x86\x33\x5d\x8c\xf3\x96\xf9\xea\xcd\x09\x98\xd3\xab\x4d\x8d\x05\x0b\xdb\x29\x7d\xa1\x4d\x8f\x70\xdd\xa5\x46\x6c\xf5\xce\xee\xec\x75\xba\xdd\xf9\x43\xe9\xcf\xbf\xa0\x45\x7d\x11\x19\xba\x93\x1d\x48\xf8\x30\x75\x20\xd6\xa6\xda\xaa\xb3\xb6\x24\xb5\xa8\xee\xd5\xae\x9e\x46\x95\x1a\x65\xa9\x94\x77\x16\xc0\xfe\x56\xf8\x50\xc3\xdd\x58\xe1\x7a\x5a\x28\x26\x9c\x85\x84\xdb\x4a\x5e\xaf\x8a\xcc\xc7\x68\x62\xa1\x63\x3c\x6a\xed\x0f\x0f\x8b\xdd\x3a\xfa\x16\x07\xd2\xce\x0b\xbf\x5f\x28\xee\xef\x39\xe5\x26\xc9\xde\x0a\xe6\x70\xea\x92\xe2\x05\x7e\x43\x86\xfc\x86\x7d\x34\x57\x7e\x54\x27\x6b\xff\x4b\xb6\xba\xb8\xdc\xf6\xff\x56\x66\x66\x02\xf0\xe1\x7c\xdf\xe3\xfe\xb5\x92\xa5\x43\xf4\xc6\xc4\xa4\x59\xf6\x67\x3f\x98\xed\x6a\x32\x54\xdb\x4b\x1d\xa9\x6e\x0b\x84\x53\xdb\xe9\xb7\xaa\x20\x1e\x47\x7e\x5c\x37\x32\xbf\x92\xdf\x38\xe2\x13\xaa\xb5\x2e\xce\x5a\x2f\xa0\xac\x9e\xc1\xeb\x00\xe3\x19\xbc\x2c\x6d\x7e\xb6\x75\xb2\x2e\x58\x0a\xad\x4c\x44\x7e\xf3\x2f\x33\xa9\x5e\xa5\xdd\x75\xdb\xc1\x77\x56\xee\x38\x63\xb2\x64\x78\x44\xac\x5a\xb1\x95\x1f\xf3\x67\xc3\x8a\x6c\xae\x8b\x71\xd7\x2d\x1b\xa9\x48\x4e\x9f\x81\x50\xb3\x76\x3b\xe9\x78\xb0\xd6\xf2\xfb\x4e\x84\xc0\x6c\xf6\x4c\xe2\x31\xfd\x4f\xc3\x04\x64\xc1\xc6\x73\x7a\xdb\x41\xb7\x8d\x31\xeb\xbf\xb1\x88\x57\x8a\xd0\x42\x00\xcd\xce\xe4\x27\x90\x46\x42\xe6\x6b\x29\x23\xf0\xf0\xed\xea\x6a\xf1\xe5\xcb\xe4\x06\x10\xf7\xfb\x91\xb5\xb5\xee\x2c\x90\xb9\x7e\x9b\xba\x37\x74\x80\xb1\x35\x23\xab\x80\x7c\x75\x2e\x2f\x5f\x49\xb0\x1a\x2c\x87\x17\x26\x95\x7c\x53\x08\x80\xcb\x46\x00\x51\x39\x55\xf8\x07\x03\x89\xe5\xda\x5f\x5e\xf0\x64\x2e\xeb\x8a\x03\x57\x3a\xc2\x78\xa5\x60\x63\x50\x46\xb7\x26\x33\x6b\xc6\x5f\xcf\x00\xd9\xd8\x76\x60\xdb\xea\xeb\x0d\x2d\x0a\x34\x03\x5a\x4f\xb4\x09\x23\x5c\x44\x24\xc3\xc2\x23\x27\x4c\x19\x3b\xe6\x4a\xe7\x49\xc0\x01\x04\xf0\xd4\x70\xe6\x50\x0e\x88\xc3\xa5\x49\x69\xd4\xdb\xb9\x99\xa6\xc3\xf2\x42\x59\xb6\x2f\x65\x57\xed\x7d\x83\x1b\x67\xa3\x7a\x1c\x6e\x85\xae\x92\xa0\x87\xc1\xf5\xd0\xb3\x5f\x8e\xd8\x48\x1f\x5f\xdc\xfd\x71\x54\xb9\x59\xb8\x95\x99\xdc\xe1\xec\xec\x2c\x59\x45\x96\x59\x77\x2e\x7f\x98\x23\x6c\x04\xa6\xba\x42\xe8\xf7\x62\xa6\x26\xc5\x26\xf1\x3c\x9c\x94\xc4\x48\xb8\xbf\x24\x8c\x1f\xee\x00\x4a\x8b\x4a\x42\xd8\x02\xad\x3f\xb8\x5f\xa2\x37\x15\x16\x8c\x38\x31\x3c\x94\x70\xb2\xe1\xc9\x72\x6e\xa5\xdf\xb5\x86\xf6\x93\xf0\xb2\xf9\x2f\x00\x00\xff\xff\x73\xa6\xcd\xeb\xd3\x10\x00\x00")

func mapping_static_js_mapping_analysis_tokenizer_js_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_js_mapping_analysis_tokenizer_js,
		"mapping_static/js/mapping/analysis-tokenizer.js",
	)
}

func mapping_static_js_mapping_analysis_tokenizer_js() (*asset, error) {
	bytes, err := mapping_static_js_mapping_analysis_tokenizer_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/js/mapping/analysis-tokenizer.js", size: 4307, mode: os.FileMode(420), modTime: time.Unix(1431973886, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_js_mapping_analysis_wordlist_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\x4f\x6f\xdb\x3e\x0c\xbd\xf7\x53\xb0\x46\xd1\x38\x68\x7e\xee\x6f\xd7\x19\x3d\xed\x34\x60\xdd\xb5\x87\x20\x18\x14\x8b\x49\xb4\xc9\x92\x27\xca\x49\x83\x20\xdf\x7d\x94\x12\xb7\x96\xf3\x07\xe9\xc1\x6e\xf4\xc8\xe7\xc7\x47\x52\x6b\xe1\xe0\xcd\x3a\xf9\x43\x91\x7f\xb5\x52\xe8\x6f\xde\x69\x78\x81\x45\x6b\x2a\xaf\xac\x81\xfc\x81\x2a\xdb\xe0\x04\x1e\xea\x00\x7f\x37\xe4\x85\xa9\xf8\xb7\x11\x35\x3f\x37\x9c\x4b\x13\xa8\x45\xd3\x28\xb3\x1c\xc3\xee\x0e\xf8\xef\x90\x53\x84\x10\xe6\x0a\xaf\xb2\x7f\x6e\x9d\x5a\xfe\xbc\x80\xa1\x73\xd6\xbd\x22\x91\x58\x06\x3c\xcb\x12\xd4\xe0\x26\xa8\x3d\x05\xa2\x0e\x3e\x8e\xef\x82\xb4\xaa\x30\xff\x7f\x5c\xc2\xf3\x33\x54\x0e\x85\x47\xe0\xb0\x6d\x3f\x83\x50\x63\xe5\x51\xbe\x1d\x33\xa7\xb3\x84\xf0\x58\x11\x03\xc7\xff\xca\xbb\x3e\x5c\x05\x13\x52\xa3\xba\xe2\x63\x54\x62\x56\x21\x15\xd5\x8a\x28\x1f\x1d\xd2\x46\xe3\xc3\xa7\xf6\x29\xa7\x90\xf2\x58\x5c\x47\x9a\x70\xaa\x45\xd7\x8c\xce\x86\x3e\x3a\xf4\xa2\x68\x5a\x5a\x0d\xe3\xcb\x73\xe1\xa7\x9e\x46\x6d\xe7\x14\x3a\xac\xed\x1a\xaf\x89\x64\xbf\xc9\x3a\x0f\x7e\x85\xd0\x39\x1c\x9b\x02\xca\x48\x7c\x47\xe2\xb7\xb7\x20\x91\x2a\x34\x32\x18\xcc\x18\xba\x34\x1f\x36\xdc\x2e\x61\x38\x4a\x23\x77\x4e\x79\xac\x09\x36\xca\xaf\x6c\xeb\x61\x25\xd6\x21\x8d\x49\x84\xfc\xdd\x92\xef\x88\xef\x06\x65\x25\xfd\x2d\x82\xa8\xfc\x43\xb1\x98\xcc\xc7\x3b\x70\xe8\x5b\x67\x60\x0e\xff\x81\x28\x61\xdf\x73\x67\x61\x1d\xe4\x61\x35\x22\x37\x3f\xcf\x92\x5e\xb5\x9f\x9a\x38\x83\xe7\xf2\xa6\x91\x75\x36\x81\x2f\xe3\xa1\xdf\x37\xcc\xe7\xa0\x25\xf3\x56\xe9\x6b\xdd\xa8\x83\x45\xec\x19\x82\x88\xcb\x96\x8c\xd3\x7d\x6f\x51\x2f\x54\x33\xdc\xc7\xb8\xb7\x8a\xd8\xbc\xbf\xad\x72\x28\xb3\x74\xa6\x0e\x9e\xf6\xcb\xea\x8b\x89\x17\x42\x54\x64\xac\x07\xa1\x79\x33\xe5\x16\xe6\x08\x2d\xa1\x3c\x3b\xe8\x21\xe1\xfe\xe5\xe4\xe2\x78\x7c\x1c\xec\x69\x21\x8c\xd0\x5b\x52\x54\x78\xfb\x07\xcd\x2f\x3e\xa6\x69\x8f\x64\x76\x63\x79\x71\xb6\xb5\x0a\x0a\x39\x4b\xc2\x28\x83\xa7\xe4\x3a\x7b\x82\x6c\xf4\xa1\x1c\xdf\x39\x92\x6e\xb7\xc0\x21\xb5\xda\xf3\x77\x76\xfb\x72\x70\x98\x88\x0d\x11\x09\x67\xe6\xb7\x0d\x66\x5f\x21\xab\xd8\x3c\x5b\x67\x93\x01\x1a\x6a\x26\xc6\xfb\x23\xf8\x29\xa0\xbc\x74\x2f\x55\xda\x12\xe6\x07\x01\x9f\x77\xd2\xbe\xfc\x17\x00\x00\xff\xff\xee\x8f\xed\x98\x16\x06\x00\x00")

func mapping_static_js_mapping_analysis_wordlist_js_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_js_mapping_analysis_wordlist_js,
		"mapping_static/js/mapping/analysis-wordlist.js",
	)
}

func mapping_static_js_mapping_analysis_wordlist_js() (*asset, error) {
	bytes, err := mapping_static_js_mapping_analysis_wordlist_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/js/mapping/analysis-wordlist.js", size: 1558, mode: os.FileMode(420), modTime: time.Unix(1431973886, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_js_mapping_analysis_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x5f\x6f\xdb\x38\x12\x7f\xbe\x7c\x0a\x56\x28\x1a\xbb\x09\x9c\xf7\x04\xc1\xa1\x68\xef\x80\xe2\xae\x8b\x7d\x48\xb1\x0f\x46\x50\xd0\x12\x5d\x13\xa5\x45\x43\xa4\x92\x75\xb7\xf9\xee\x3b\x43\x4a\x14\x49\xfd\xb1\x94\xb6\xbb\x49\x36\x7a\x68\x2d\x91\x33\x9c\xf9\xcd\x70\xf4\x1b\x2a\x67\x67\x24\x95\xb9\x2e\xa4\x10\xac\x20\x05\x53\x3b\x99\x2b\xbe\x12\x8c\xac\x65\x41\x56\x25\x17\x19\xcf\x3f\x13\x4a\xd2\x52\x69\xb9\x25\x34\xa7\x62\xaf\xb8\x02\xa9\x2d\x4c\x65\xb9\x56\x47\x47\xeb\x32\x4f\x35\x97\x39\x79\x53\x8d\xbe\xd5\x85\x98\xbd\x54\xa9\xdc\xb1\x53\xf2\x72\xa3\xf5\x0e\xfe\x2b\x64\xa9\xd9\xaf\xb4\xa0\x5b\x05\x77\x42\x7e\x86\x7f\x55\xca\xcc\xef\x94\xa2\x3c\xfc\xdc\xca\x8c\x8a\x39\xf9\xe3\xe8\x88\xc0\x05\xd6\x99\x05\xbf\xb2\x42\xd9\x27\x56\xe9\x22\x67\xb7\x6f\xaa\x01\x72\x49\xdc\xfa\x33\x94\x24\xd5\x55\x30\x5d\x16\x79\x2d\xc1\x32\xae\x6b\x91\x59\x92\x9c\x7a\x13\xf1\x4a\xf4\x7e\xc7\x92\x73\x92\x58\x3f\x93\xd3\x70\x34\xdd\xd0\xe2\xd3\x9a\x0b\x0d\x86\xc0\xac\xe5\x75\x34\xae\xe5\x17\x96\x73\x50\x8d\x2a\xca\x9c\xa7\x32\x63\xb1\x0e\x33\x27\x50\xe2\xc6\xef\xe6\x17\xe6\xf7\xdd\x45\xe0\x65\xc6\x04\xd3\xac\xd3\xd1\x9c\x6e\x99\xef\x6c\xa9\x58\x06\x13\x2a\x41\xae\x6a\xa1\x8f\xf0\xdc\x4e\xbe\x70\x73\xf9\x9a\xcc\x70\xfe\x3c\xc2\x80\x42\x0a\xe8\x59\x72\xb5\x81\xf0\xd6\xb0\x93\x94\xe6\xb9\xd4\x64\xc5\x88\xb5\x26\x83\x9f\x29\x05\x71\xc2\x35\x81\x89\x2b\x86\xf9\x61\x96\x5f\xed\x89\xde\x30\x92\x90\x13\x7b\x7f\x42\x92\x45\xe2\xad\xdb\x04\xa5\x79\x76\x17\x58\x05\xa9\xb8\xe6\xc5\x76\x96\xbc\x29\x18\xd9\xcb\x92\xa8\xb2\xfa\x71\x4b\x73\x4d\xb4\xac\x8c\x20\xc7\xb8\x08\xba\x85\x8b\x1c\xff\x3b\x99\xc7\xbe\x54\xf3\x2a\x3c\x5e\xee\x68\x01\xa9\xba\xd8\xd2\xdd\x0e\xcc\x5d\xd4\x59\xbc\x70\xd9\xb5\x44\x65\xd7\xb1\x5d\x51\x3c\x42\x58\xbd\x78\xb4\xc2\xe1\x27\x2e\x81\xb5\x2d\x20\x3c\x27\x95\x05\x8a\xcc\xe0\xe6\x86\x16\x5c\x96\x8a\xec\x04\x4d\x99\x9a\x1f\xf9\xe2\x80\x83\xd2\x24\xdd\xb0\xf4\x0b\xc8\x65\xec\x77\x22\xd8\x0d\x13\xe0\xd8\x9a\x96\x42\x3b\xf5\x01\x7e\x3d\xee\x56\x32\x9f\x5c\x50\x2f\x2f\x49\x6c\x71\x13\x1c\x92\xd8\xf5\x2a\xe9\xd6\x8a\x89\x8f\x92\x6f\x32\x04\x3f\xaf\x2c\xc6\x3c\xa8\xe5\x32\x99\x96\x5b\x88\x5e\xa5\x6f\x54\xca\xbe\xcf\xdf\xc9\xf4\x83\x15\x30\xe0\x9e\xf6\x85\xb2\xf6\xad\xba\x3f\x25\x49\x32\x22\xd5\x6b\x4f\x03\x1b\x59\x63\xa4\x4b\xe2\xb1\xbe\xc6\xf2\x58\x3d\x19\x4d\x37\x04\xeb\x8a\x13\xc4\xa7\x33\x88\x3a\xce\xbf\x82\x01\xcc\x88\x1e\xbf\x50\x4e\xb5\xb2\xda\x81\xd2\x00\xd7\x29\xb8\xac\x16\xb8\x0e\x77\xdf\x44\xc8\x9b\xe5\x22\x58\x87\xa0\x0d\xe0\x8d\x61\x41\xe3\xec\xe6\xad\x11\xc0\xfd\x4b\x92\x50\xf5\x5d\x17\xe8\x95\xce\xbc\x14\x22\x2c\x96\xb8\xd7\x60\x34\x2d\x0b\xc5\x6f\x18\xd9\x30\xb1\xab\xb6\xc5\x41\x3f\xe3\x2d\x1c\xba\xbc\xa3\x7a\x13\x6d\x6a\x7f\x57\x06\x71\x1f\xb1\x39\x1b\xd5\xa3\x37\x24\x8a\xc5\x56\xf4\xa5\xb0\xd3\x45\xb5\xc9\x5e\x94\x8b\x60\x25\x4c\x40\xdd\x1e\xaf\x6a\x20\x2c\x1e\x26\xb9\xbc\xad\x10\x59\x73\x26\x32\x85\x06\x68\x7c\x87\x18\x4c\xda\xb9\x6f\x66\xbd\x37\x25\x06\xd2\xdf\x43\xc5\x8a\xc7\xbe\x9a\xa7\x10\xa8\xd6\xc4\x65\xa3\xe8\xba\x9d\x9a\x66\x70\x71\x08\xe0\x70\x76\xdf\x0c\x1f\x23\x30\x19\x03\x6f\xad\x42\x81\xcc\xa0\xdd\x28\xb8\x68\x89\xdf\xf5\x02\x1e\x28\x03\xd8\x30\x66\x7d\xc1\xeb\x29\x44\x0d\xfa\xa6\xdc\xe4\x4c\xe1\x3b\x7a\x57\x40\xe2\x17\x7a\xdf\x46\xbf\x1e\xf9\x05\x5f\x9e\x21\xfe\xd5\x10\x6f\xd7\x1d\x55\xae\x60\xd3\x84\x41\x68\x66\x2f\x7d\x9d\x1d\xa1\x38\x90\xc1\x63\xab\x91\x35\xc2\x6e\xcb\x13\x60\x16\x27\xfe\xb2\xf3\x69\xa9\x3e\x79\xcd\x81\xa5\x26\x15\xab\x0e\x36\xda\xe2\x75\xa7\x40\x0c\x44\x19\x64\x22\x46\xce\x50\xe3\xf7\xb9\xd2\x34\x4f\x19\x56\x71\xf3\x60\x01\xea\xf2\x99\xef\x28\xcd\xf9\xd6\xd0\xe9\xf3\x7a\x35\xf7\x44\xfd\x27\xa7\xc0\xed\x33\x9f\x99\x6a\xb6\x05\xfe\xa1\xd9\xc7\x42\x9c\x93\xe3\x33\x50\xaf\x79\x7a\x06\x2f\x15\xcd\xa9\x50\x67\x35\x55\x3a\xab\xb7\xd2\x62\xa3\xb7\xe2\xd8\xd7\xd0\x34\x10\xa0\xa0\xf6\xea\x03\x1a\x87\x7d\x40\x30\x15\x1a\x0c\x29\x6e\xd8\x79\x14\x19\xf4\xfa\xbc\x87\xc6\x87\x80\xb6\x36\xd8\x5d\xc8\xb2\x0d\x72\xc3\xaa\x9c\x32\x33\x77\x50\x5b\xf5\xda\x6a\xf4\x0d\xa9\xeb\x7e\x1f\xf7\x25\x4b\x90\x38\xf3\x8b\x26\x75\x82\x30\x2f\x00\x30\xa8\xc8\x0b\xa4\x1b\xb3\xc6\x29\xfb\x34\xb6\x05\x5f\x84\x59\x66\x6b\xaf\x9d\x81\x8c\x19\x0b\x4c\x4c\xbd\xf0\x72\x15\xc1\x4e\xfd\x1f\xdb\x63\x39\xe8\xd6\x8c\x17\xee\x64\xc3\xb8\x5f\x40\x2d\x4d\x12\xf2\xea\x95\x27\xf9\xa2\xbf\xbc\x56\x96\x15\x6c\x2b\xe1\xed\x8c\xd6\xc8\xaa\x72\x76\x4e\xfd\x5e\xe2\xde\x85\xb4\xbd\xc6\xab\x74\x7e\x5d\xc3\x36\xb3\x37\xde\xb3\xf6\x5a\xc6\x3d\x21\x29\xd4\x5d\xa3\x9b\xd0\x1b\xca\x05\xee\x34\xaf\x7d\x3d\x60\x0e\x8a\xd7\x7b\x07\xab\x8c\x9a\xf5\xd7\x99\xd3\xde\xfc\xc6\xb6\x7a\xc1\xf3\xb5\x9c\x1d\x9b\x0d\x48\x32\xae\xb6\x5c\x21\xed\xa3\x1a\x76\x27\x76\x4d\xec\x96\xbc\x83\xfd\x3e\x9b\x7b\x0b\xc4\x0d\x28\x78\x74\x2b\x8b\x8c\x08\xae\x74\xab\xf3\xfe\x0d\x46\xfe\x0f\x03\x13\x3a\xef\x5a\xc4\x76\xde\xa6\x13\x56\xe7\xcb\xeb\xc1\xbe\xb7\x73\x99\x43\x7d\x6f\x2d\x74\xdf\xbe\xd7\x79\xfd\xc4\x1b\x5f\x7b\x18\x01\x8f\xc7\x76\xbe\x3e\xb0\x07\x3a\xdf\x26\x73\x4c\xeb\x2b\x73\xb1\x6f\x70\xc2\x75\x49\x75\x08\xd2\x66\x27\x66\xf8\xbf\x66\xb4\x26\x28\xe3\x3c\xa9\x34\xc6\x68\x78\xfa\xfa\x3b\xa6\x6e\x55\xcb\xc8\x96\x68\xdf\xb7\xfd\x64\xdb\x15\xcb\x6c\x97\x4f\x4d\x6b\xcf\xf4\x9e\xc8\x35\x6c\xc1\xf5\x9a\x99\xb2\xd0\x90\x46\xd5\x22\x49\xde\x6a\x8b\x8c\xa7\xfa\x93\x8b\x50\xcd\x5d\xc9\xb7\x6f\xad\x22\xe2\x4b\xe1\x1b\x3b\x15\x4c\x4d\x97\xfc\xc2\xf6\xe8\xcb\x3d\x24\x95\x96\xbb\xb6\xd4\x50\xbb\xe2\x27\x40\xc5\x9f\x4d\x4e\xc7\x91\xc7\xf4\x1e\xd1\x7f\x74\x12\xad\x7f\x75\x54\x9e\x47\xc2\xb2\x30\x0e\x98\x52\x07\x58\x56\xed\xd5\xdf\xc4\xb2\x4c\xb6\x4c\x61\x59\x76\x6b\xa9\x67\xb2\xf5\x28\xc9\x56\xff\xcb\xa2\x0b\x6a\x7b\x4d\xd0\x39\x85\x6e\xfd\xd5\x2c\x08\x0f\xfe\x69\x8a\xb5\xaa\x7e\x67\x45\x64\xe8\x2d\x4c\x70\x2f\x98\xce\xcc\x6d\xb3\xa1\x46\xc6\xf2\xa1\x41\x1a\xd4\xbd\xc0\x21\x1e\xd4\x48\xdd\x97\x09\xc5\x9e\x3f\x71\x42\xe4\x7f\xe1\x19\x49\x89\x42\x8c\x0f\x90\xa2\x56\x22\x21\x9e\x96\x1b\xad\x98\x43\xad\xdd\x2e\xb8\xca\x41\xbd\xe6\x60\x0c\x2f\x72\xaa\x5a\x41\x6e\xce\x1d\xc6\xb7\x44\xfe\xea\xd1\x96\x74\x16\xa6\x0e\x0f\x77\xba\xe7\x0e\x0d\x7c\x78\xbb\x0a\x57\x23\x6b\xfc\xbb\xec\x96\x5c\x46\x4b\x74\x54\x22\x93\x3c\x91\xb2\xe1\x7a\x59\x33\x13\x87\x8b\xc7\x4a\x02\xd0\x3b\x28\x49\x98\xb8\xe1\xdd\x01\x92\xe2\xa5\x52\x58\x13\x1e\x09\x53\x41\x90\x6d\x58\x0e\x70\x95\xc6\xb3\xe7\x33\xa1\x67\x9a\xe2\x5b\xf6\x83\x69\xca\x50\x09\xef\x02\xdb\x5e\x93\xb4\x3e\x64\xaa\xe2\xfe\x06\xa1\xc5\x51\xae\xea\x91\x09\x27\x36\x4e\x66\x04\x45\xe9\xd6\x7f\x88\xa2\x38\xa9\xfb\x32\x14\xe7\xf0\x13\xa7\x26\x4d\x60\x47\x12\x93\x00\xd9\x03\xbc\xa4\x51\x6e\x08\x89\xc7\x45\x5e\x4b\x00\xaa\x78\xed\xe7\x55\x2d\x17\x9e\xd7\xf0\x09\xac\xa4\x51\xd6\x79\x54\xc3\xc7\xf1\x12\x0f\x91\xc0\x82\x8e\x8f\x4f\x6e\x7c\xe1\x2d\x30\xf2\x98\x82\x7f\xed\x38\xa3\xe0\x03\x74\xa0\xef\x23\x5d\x3f\xc8\x8f\x91\xf0\x21\xac\x8e\x9e\x4d\x42\xf5\x3e\x14\xeb\xbe\x84\xaa\xbf\x28\x3d\x4c\x3e\xd5\x24\xea\x30\x9d\x72\x7e\x3d\xb3\xa9\x67\x36\xe5\x5b\xf6\x33\x0e\x7d\x3a\xdf\x3a\x5d\x50\xdb\x6b\x82\xce\x07\xcf\xa4\xfa\x0e\x7c\xae\x82\x4f\x0a\x93\xe8\xd4\xe8\x33\x9f\xbe\x35\x46\x51\xaa\xef\x3b\xf6\x09\xce\xe7\xff\x01\xbc\x6a\xe2\x99\x4f\x84\xf0\x18\x72\xf5\x74\x0f\x7c\xbc\x6f\x36\xed\x13\x9f\xc1\xef\x72\x78\xc5\x5f\x7c\x2e\x7b\x64\x97\xf1\x32\x3d\xa7\x3e\x2d\x7d\x8f\xe1\xd8\x67\x68\xa7\x3f\x60\x9e\x32\xea\xe0\xc7\xf3\xed\x99\xab\x3c\x73\x15\xdf\xb2\x9f\xf2\x81\xea\x87\x1f\xfd\x84\x6a\x1f\x24\x63\xb9\xfb\x33\x00\x00\xff\xff\xc0\xbc\x1f\x43\xc1\x33\x00\x00")

func mapping_static_js_mapping_analysis_js_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_js_mapping_analysis_js,
		"mapping_static/js/mapping/analysis.js",
	)
}

func mapping_static_js_mapping_analysis_js() (*asset, error) {
	bytes, err := mapping_static_js_mapping_analysis_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/js/mapping/analysis.js", size: 13249, mode: os.FileMode(420), modTime: time.Unix(1431973886, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_js_mapping_mapping_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\x5b\x6b\xec\x36\x10\x7e\xb6\x7f\x85\x58\x02\xc7\x0b\x8b\xf7\xbd\x4b\x1f\x4a\x4b\xa1\xa5\x27\xe7\xc0\xd9\xb7\x10\xcc\xac\x35\xbb\x47\x8d\x2c\xb9\x92\x9c\xae\x1b\xf6\xbf\x77\x24\x5f\x56\xbe\x04\xfa\x10\x1a\x88\x63\xcf\x8c\x3e\x7d\x73\xcf\x7e\xcf\x4a\xad\x9c\xd1\x52\xa2\x61\x06\x6d\xad\x95\x15\x27\x89\xec\xac\x0d\x3b\x35\x42\x72\xa1\x2e\x0c\x58\x05\x75\x4d\x6f\x69\x7a\x6e\x54\xe9\x84\x56\xec\x73\x27\xf9\xd9\x19\x99\x3d\xd8\x52\xd7\xb8\x63\x0f\xdf\x9d\xab\xe9\x8f\xd1\x8d\xc3\xaf\x60\xa0\xb2\xf4\x25\xf5\x85\x9e\xb6\xc4\xf0\x5e\x82\x3f\xbe\x65\x6f\x69\x9a\x28\xfc\xfb\x57\x81\x92\x7f\xc3\x0e\xf3\x47\x36\xc0\x67\xde\x20\x49\x0c\xba\xc6\xa8\xf0\x9a\x6c\x50\x01\x31\xe3\x9b\x1f\x98\x33\x0d\xee\x82\x8c\xb7\x0a\x2a\x51\x4e\x65\x78\x86\x46\xba\x02\x14\xc8\xf6\x1f\x34\xa4\xdc\x6c\x3a\x55\x6d\x88\xa7\x71\x02\x2d\x09\xdf\x6e\x9d\xf0\xec\x29\x78\xc1\x93\xff\x4c\xc2\x65\x24\x76\x6d\x8d\xf7\xa3\x24\x10\x8a\xe3\x35\xbe\x89\x64\xd6\x69\x83\x33\x99\x50\xa5\x6c\x38\x16\x42\x15\x20\xe5\x3b\x4a\x87\xa6\x2a\x5e\xc9\x6f\x6d\x6c\x6f\x12\x2c\x6e\xfe\xf9\x4c\x8f\xdb\x21\xf5\xbf\x69\xd2\x05\x37\x7f\xa8\xc1\xa0\x72\x79\x9f\x09\x8a\x95\x27\x3a\x3a\xdb\x8b\x09\x6a\x16\xd4\x6c\xeb\xaf\x0e\xde\x14\xc1\x53\xef\x53\x11\x9c\xdb\xc5\x00\x83\xbb\x45\x2f\x98\x6a\xe3\x58\x5a\x07\x8a\x83\xe1\x53\x0b\x0e\x0e\x9d\xa8\xb0\x20\x9e\xb6\x33\xf4\xa2\x23\x89\xbe\xd4\x9e\x08\xc8\xe9\x81\x3b\x19\x1f\xa5\xa0\x3a\xb5\x0e\x0b\x30\x06\xda\x82\xca\xf2\x95\x32\xd5\x01\xfd\x69\xb5\xea\x2c\x02\x0f\x2b\x42\xfa\x42\xf2\x06\x62\x71\x42\x9d\x7e\x41\xe5\x23\x12\x0b\xcb\xef\x60\xe8\x4e\xe9\x56\x6c\xc5\x2a\x40\x6c\x9c\x86\xcc\xc4\xf9\x18\x2e\x7e\x84\x0a\x2d\x65\xe3\xe9\x39\x52\x4a\x0d\xfc\xa7\x99\xc1\xa4\xb4\x59\xff\x13\x3a\x26\xaf\xb5\x75\xd9\xa7\x3d\xd4\x62\x5f\x4c\x70\x3f\xed\xd6\xb3\xbf\xcd\x6d\x53\x96\x68\x6d\x36\xa2\x52\xb0\x21\x46\x0e\xe8\xeb\x54\xbd\xe9\x28\xb4\x87\xf1\xc8\x6d\x9b\x8f\xef\x68\x8c\x36\x53\xf4\x1d\xcd\x0a\x8e\x5d\x63\x0e\x8e\x06\xb3\xcf\x44\x04\x2e\xd8\x23\xc7\x78\xb3\x1a\x5e\x84\x25\xdb\x46\xda\xa1\x82\xbe\x86\x02\x7a\x37\xae\xbf\xac\x9a\xfd\xc7\xe8\xae\xdc\xf1\x31\x31\x5e\x27\x1f\x22\x3d\xeb\x8c\xff\x3b\xe0\x2b\xf1\x9a\x84\xbd\x77\xf7\x48\xfd\x4f\x80\x43\x7b\x6e\x0e\xa3\x81\x45\x49\xa3\x04\xf9\x6f\x0e\x2b\xb2\x50\x8d\x94\x4b\xe5\x1f\x70\x42\xe9\xcf\x6f\x22\xe8\xd0\xe2\x1e\x38\x24\x32\xed\x67\xeb\x86\x46\x76\x18\x35\x0e\xaf\xae\x1f\xcc\xd2\x1f\xf7\xb2\xe3\x5d\xc6\xd1\x96\x46\x84\xd9\xe1\x35\xc0\xbc\x3d\xeb\xc6\x86\xef\xc7\xdd\x02\x50\x35\xd5\x89\x26\xc6\x0c\xf2\x31\x96\x2e\x40\xe9\x0c\x1a\x51\x82\x64\xaf\x20\x69\x4e\xb3\x30\xe6\x91\x33\xa7\xd9\x19\x4a\x21\x85\xa3\x00\x32\x03\x8a\x02\xfe\x57\x43\xb6\xb4\x3c\xd6\xaf\x1f\x12\x3d\x27\xe0\x33\xb0\x3f\xde\x15\x0b\x0e\xfe\xe0\xde\x9f\xfc\x00\x0e\xc2\x76\x5b\x72\xce\x61\x2a\x5f\x50\xb0\xfd\x0a\xd6\x67\xf6\xfb\xb7\x2f\x8f\xfe\xe6\x13\x52\xfd\x55\xb5\x44\x87\xb2\x65\xe2\xa2\x68\xd5\x75\x91\x4f\x93\xb8\x29\x4b\x29\xca\x97\xbe\x38\xc6\xfa\xbd\xee\x58\xdb\x55\xee\x7a\x15\x5d\x0f\x4b\xd5\x50\x43\xed\xac\x8a\xc7\x0b\xb2\xf5\x4e\xcd\x67\x4b\x30\xae\x6e\xe0\x3c\x6c\xc3\x98\x5b\xd0\x74\xe4\xc4\x99\x75\x9f\xf9\xb0\x36\x7d\x83\x4c\x5b\x2e\x66\x9e\xdf\xff\x83\x78\x5a\x9e\x7b\xf6\xed\x31\x5f\xbf\xde\xd1\x64\x69\xdb\xf7\x0a\xe9\x68\xd5\x59\x2d\x7d\xb3\x5e\xb2\x95\x2b\x03\xc0\x6c\xf9\xd0\x32\xa3\x52\xe8\x5b\x76\xc5\x2f\xb2\xbd\xfd\x1b\x00\x00\xff\xff\x8c\x3b\x52\x9d\xdc\x09\x00\x00")

func mapping_static_js_mapping_mapping_js_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_js_mapping_mapping_js,
		"mapping_static/js/mapping/mapping.js",
	)
}

func mapping_static_js_mapping_mapping_js() (*asset, error) {
	bytes, err := mapping_static_js_mapping_mapping_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/js/mapping/mapping.js", size: 2524, mode: os.FileMode(420), modTime: time.Unix(1431973996, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_analysis_analyzer_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\xcb\x6e\xdb\x3a\x10\x5d\xdb\x5f\x41\x10\x77\x91\x2c\x14\xe5\xb1\x95\x05\x04\x01\x2e\x70\x17\x37\x28\xd0\xee\x0b\x5a\x1a\x5b\x84\x29\x52\xa0\xa8\x24\x8e\xe1\x7f\xef\x90\xd4\x83\xaa\x64\x37\x4d\xd0\x47\x80\xd8\x14\x39\x3c\x33\x73\xce\xcc\x58\x49\xce\x9f\x48\x26\x58\x5d\xaf\x68\xa9\x72\x26\xa2\x02\x58\x0e\x9a\xa6\x4b\x82\x7f\x49\x71\x37\x3e\x35\xdc\x08\xa0\xe9\x43\x53\x1b\x55\x92\x7b\xc9\xc4\xfe\x15\x74\x12\x17\x77\xe9\x32\x89\x11\x0c\xbf\x26\x90\x6b\x95\xef\x11\x70\xb9\x70\x47\x72\x1b\xd5\x85\x7a\x5e\x51\xd0\x5a\xe9\xff\xa1\xae\xd9\x16\x68\x77\x83\x09\xd0\x86\xb8\xcf\x28\x67\x72\x0b\xda\x5e\xc8\x84\x62\x3b\x4a\xb4\x12\xd0\x9a\xd0\x94\x1c\x0e\x21\xc2\xf1\x88\xf8\x3e\x02\x5c\x6c\x94\x2e\x3b\x48\xbb\xee\xee\xba\x75\xba\x5c\x2c\xc2\x28\xed\x66\xb4\xd5\xaa\xa9\xdc\xd1\x22\x11\x6c\x0d\x82\xe0\x36\x3a\x93\xac\xc4\x84\x1f\xf1\x33\x89\xdd\xbe\x37\xe1\xb2\x6a\x8c\x0d\x0d\x53\x04\xb1\xa2\xce\x8c\x98\x7d\x85\x4e\x0c\xbc\x18\x3a\x02\xcf\x94\x34\x18\x00\x25\x3c\xc7\x63\x6f\x5b\x09\x96\x41\xa1\x04\xb2\xbd\xa2\x8f\xce\x8b\x8d\xab\x4d\x01\xe9\x3f\x19\xa2\x53\x26\x88\x11\x5e\x58\x59\x09\xf8\xcf\x86\xf4\x09\xcd\x9f\x95\xce\x6f\x50\xa4\x82\x69\x96\x19\x64\xf0\x5f\x2e\xf0\xab\xee\x13\xb0\x00\x8b\xa4\x11\x1d\xba\xe0\xb5\x69\xd1\x07\x79\x58\x2b\xee\x55\x86\x38\x5f\x37\x1e\xe2\x4a\x80\xdc\x9a\x82\x24\xe4\xa6\x0d\xc4\xd2\xc5\xa7\x40\x11\x37\x80\x4c\x3f\x2a\x69\x79\xe3\x9d\xcf\xb8\x71\xfc\x7d\xc8\x77\x4a\xae\x29\x69\x78\x54\x2b\x6d\xd8\x5a\x40\xa0\xc2\xec\x3d\xc7\xab\x65\xec\x64\x98\x16\x41\x43\x05\xcc\x0c\x10\x96\x3d\xcf\x1b\xe1\x92\xcc\x02\x13\x62\x90\xe0\x1d\x59\xef\xc9\x3f\x5c\xe6\xf0\x42\xd3\xa4\xae\x98\xec\xdc\x6c\xc5\xbe\x2a\x38\x6a\x4f\xfa\x55\x54\x72\xd9\x60\x44\x49\x6c\x0d\x6d\x0d\x93\x19\x87\xc7\xa3\xc7\x71\x95\xcf\xb3\xdd\x8a\x6a\x28\xd5\x13\x0c\x26\x17\xde\xe1\x25\x3d\xe7\xcb\x5f\x22\x55\x23\x44\xa4\xf9\xb6\x30\xbd\x5f\x2f\xc9\xa2\xd5\x03\xb9\xf1\x55\x77\xb6\xe6\xc6\x7d\x31\x57\x73\xb7\x16\xbf\x2f\xb1\xc5\xb8\xc9\x32\x25\xa2\xba\x8c\x6e\xae\x87\xba\xa9\x41\x40\xe6\x9a\x08\x59\xc5\x56\x47\xf2\xf3\x7c\xc8\xf1\xc1\x6d\xe6\x17\x97\x34\x54\xd8\x5b\xb8\xba\xf6\x66\xae\x75\x4e\x77\xdb\xf4\x82\x2b\x88\x36\x04\x55\x19\xae\x64\xa8\x7f\x36\xd2\x7d\x78\xb2\x6e\xf0\xe6\xe1\x30\x6c\xa1\x4c\xb1\x07\xe8\x00\x91\x5e\x97\xd3\xf0\xec\x78\x6d\x1f\xa6\x6c\xdc\x0e\x64\xac\x1b\x63\x54\x28\xf9\x88\x8b\x0b\x53\xf0\xfa\xb2\x1b\x30\xde\xb6\x4f\x7a\x6d\x24\xc1\xff\x28\x87\x0d\x6b\x84\x19\x09\x7e\x9f\xe7\x49\xec\xed\x7b\x57\xbd\xd8\x6f\x50\x7d\x3c\x69\xba\x5a\xfd\xa2\x76\x20\xf9\xab\xfd\x9d\xe8\x97\xc3\x78\x74\xb7\xa6\xe2\x9a\xce\x72\x5e\xd8\xae\xc3\x7a\xb3\x73\xa2\x4e\xe3\xe8\x48\x9e\x2a\xda\x03\x5a\x41\xfb\x87\x5e\xcf\x7e\x67\x22\xe7\xa0\xe6\x7b\xb8\x3a\xd1\x21\x2e\xe4\x0f\x4e\x64\x17\xf2\x9f\x1a\xc9\xb3\xce\xdf\x32\x93\x47\x17\xdf\x37\x94\x1d\x79\x33\x53\xf9\x3b\xe8\x9f\x9d\xc2\xe1\x18\x0e\x5d\x9c\x9a\xc3\x81\xcd\xfb\x07\xf1\x5f\x3b\x81\x83\xec\x4e\x8d\xe0\xc0\xe4\xc7\xe3\x37\x30\x3e\x3f\x7a\xcd\x58\x5d\x33\x76\x32\x34\xeb\x6f\x9a\xbe\xa1\xca\xbf\x70\xfc\x2e\xed\xfb\x6a\x6c\x99\xc3\x75\xb7\x37\x7d\x89\xde\x28\x65\x86\xf7\xf2\x36\xde\xf9\x08\x68\x90\x47\xc6\x64\x06\x02\x05\x4c\x1f\xdc\x6a\x1c\xcd\x34\xef\x75\xc3\x85\xd3\xfb\x6c\xaa\x95\xe6\x25\xd3\xfb\x51\xaa\x9f\xd9\x13\x0c\xe8\x3e\x91\x6f\x01\x00\x00\xff\xff\x3d\xf1\x66\xd3\x5f\x0c\x00\x00")

func mapping_static_partials_analysis_analyzer_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_analysis_analyzer_html,
		"mapping_static/partials/analysis/analyzer.html",
	)
}

func mapping_static_partials_analysis_analyzer_html() (*asset, error) {
	bytes, err := mapping_static_partials_analysis_analyzer_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/analysis/analyzer.html", size: 3167, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_analysis_analyzers_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x53\x4d\x6f\xdb\x30\x0c\xbd\xe7\x57\x10\x3a\xb5\xc0\x9c\x60\x3b\xdb\x06\x06\x6c\xd7\xde\xf6\x03\x64\x8b\xb5\x85\x2a\x92\x20\xd1\x4d\xbd\xa2\xff\x7d\x94\xfc\x11\x7b\x6b\xb3\x53\x2f\xc9\x23\x2d\xf2\x3d\xea\x51\x25\xc9\xc6\x20\xb4\x46\xc6\x58\x89\x29\xc8\xbf\x45\xa4\xa0\x3d\x2a\x51\x1f\x00\x4a\xea\x51\xaa\x84\x12\x0e\x13\xc8\xe9\xfa\x41\x9e\xb1\x3c\x31\xd8\xe4\xae\x31\xa3\x7c\x3a\x65\xe6\x0e\x25\x35\x4e\x8d\x6b\x2f\xb0\x5d\x11\xd0\xa3\xa4\x4a\xdc\x49\xcb\xdd\xbe\xc8\x67\x69\xee\x41\x5b\x38\x4b\xef\xb5\xed\x8e\x9c\x36\x63\xd4\x71\x02\xbf\x31\x44\x71\xa5\x53\xf5\xeb\x6b\xae\x7b\x7b\x63\x16\xb5\xfd\x30\x43\x0e\x94\x7e\x5e\x66\x6c\xc8\x16\x5d\x70\x83\x87\x15\x15\x2f\x51\x40\x70\x06\x2b\x91\x63\x71\xad\xe4\xda\x66\x20\x72\x36\xe9\x6c\x8d\x6e\x9f\x2a\x81\x4a\xd3\xf7\x59\xc9\x2c\x19\xb2\x66\x01\x34\x7a\x6e\x32\x55\x88\x0d\x63\xe6\x52\xf8\x28\x07\x43\x19\xbf\xc4\x1d\x09\xd3\x44\x2f\xed\x52\xd1\x99\xd1\xf7\xba\x65\xd6\x15\x15\x89\x55\x80\x0c\x5a\x16\xbd\x56\x0a\x2d\xdb\x15\x06\x14\x7c\xdb\xa9\xb4\x86\x9f\x7c\x60\xab\xfb\x34\xc9\xb8\x3d\x8b\x42\x83\x84\xfb\x69\x3e\x77\x0e\x0a\x32\xf6\x37\x07\xf9\x91\x35\xdd\x1c\xa5\x3c\xb1\xa3\xab\xd5\xab\xed\xcb\xba\xad\x9b\x15\x7b\x77\xa9\xc4\x2f\xd2\x26\x1e\x9f\x70\x8c\x77\x1f\xaf\xd4\xfd\xd1\xa0\xed\xa8\x87\x12\xbe\x6e\xd7\x0b\x5a\x67\x92\xae\x4a\x7c\x13\xf5\x83\xb3\xf8\x2f\x1d\xff\x2f\x3b\x5d\xd2\xa3\x73\xf4\xce\x4b\xd9\xf7\x39\x7c\xec\x88\xc5\xcb\x6a\xc7\xff\x9c\x88\xe7\x9d\x21\x7e\x30\xa6\x08\xba\xeb\x89\x95\xe2\x05\x96\x3e\x7f\xdf\xdf\xbb\x13\x4c\xba\x19\xa4\xd7\x5f\x1f\x0e\x7f\x02\x00\x00\xff\xff\xb5\xaf\xf3\xb0\x1a\x04\x00\x00")

func mapping_static_partials_analysis_analyzers_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_analysis_analyzers_html,
		"mapping_static/partials/analysis/analyzers.html",
	)
}

func mapping_static_partials_analysis_analyzers_html() (*asset, error) {
	bytes, err := mapping_static_partials_analysis_analyzers_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/analysis/analyzers.html", size: 1050, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_analysis_charfilter_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\xcd\x8e\x9b\x30\x10\x3e\xc3\x53\x58\x3e\xb5\x07\x8a\xda\xbd\x02\x97\x48\xbd\x75\x2f\xed\x0b\x18\x33\x01\x6b\x07\x6c\xd9\xc3\xb6\x51\x94\x77\xef\xd8\x0e\x4d\x48\x54\x69\x23\xc5\x8c\xe6\xe7\x9b\xef\x1b\x8f\x9b\xc1\xbc\x0b\x8d\x2a\x84\x56\xce\x76\x50\x58\x4d\xa0\x06\xf0\xb2\x2b\x05\xff\x9a\xe9\x65\x1f\x25\x43\x08\xb2\x3b\xac\x81\xec\x2c\x0e\x93\xf2\xe2\xbb\x41\x02\xdf\xd4\xd3\x4b\x57\x36\x35\xe3\xf1\xe7\x09\xb5\xb7\xc3\x89\x31\xcb\x22\x85\x96\xb1\x0a\x93\xfd\xdd\x4a\xf0\xde\xfa\x1f\x10\x82\x1a\x41\x6e\x15\x0a\xc1\x93\x48\x67\x35\xa8\x65\x04\x1f\x0b\x34\x5a\xf5\x26\x85\xb7\x08\xd7\x14\xd9\x89\xf3\xf9\x1e\xe1\x72\x61\xfc\xcc\x80\x8d\xa3\xf5\xf3\x06\x19\xed\xad\x36\xd9\x5d\x59\x14\xf7\x2c\xa3\xb3\x1a\xbd\x5d\x5d\x0a\x15\x0d\xaa\x1e\x50\xb0\xbb\x95\xb4\xa8\x99\x35\xbf\xf2\xd9\xd4\xc9\x9f\x53\xcc\xe2\x56\x8a\xd4\x58\x22\x60\x2b\x53\x9a\xa0\x93\xe3\x26\x04\x7f\x48\xee\xc0\xb5\x5d\x88\x09\x48\x61\x86\x0d\x52\x38\x54\x1a\x26\x8b\x3c\xf0\x56\xbe\xa6\x2e\x91\xd7\x26\xe1\xc3\x0c\x35\xdf\xc3\x31\x5d\x43\xec\x2e\xbb\x5f\x7c\xee\xa8\xde\xe1\x68\x8b\x55\x98\xab\xaf\xdf\x44\xe2\xbf\x83\x0c\x80\xa0\x93\x24\x46\xe4\xc1\x67\xe4\x7c\xc1\x11\xf3\x90\xbc\x9f\x3e\xcb\x3b\xd5\xb7\xde\x5f\x52\xf3\xff\x8b\x7e\x64\x59\x16\x71\xc5\xb8\xad\x75\x64\xec\x12\x31\x3d\x38\x50\xf4\xd0\x96\x89\x8a\x3d\x8f\x20\xbb\xf3\x79\xe7\xba\x5c\x9a\x3a\xc3\x6c\xb0\x4d\x9d\xd5\x64\x65\x79\xa4\x4f\xb3\xfd\xb7\x88\x4f\x2a\x38\x62\x16\x8d\xeb\x00\x22\x78\x9d\xe5\x38\x45\x93\xac\xb9\x3a\xae\x59\x74\xb0\xb9\x01\x3e\xaf\xfc\xd1\x5a\xba\x3d\xa4\x7e\x25\x62\x8d\xd7\x8c\x9e\x16\xc1\xff\x6a\x80\xa3\x5a\x91\x64\x5e\x70\xa3\xdf\x98\x89\x5a\x34\x20\xcf\xb8\x3b\x24\xab\xa9\x73\xe9\x1e\xe7\x96\xdf\xaf\x06\x87\x78\x25\x79\xf1\x72\x5c\x3e\x36\x72\xde\xcc\xca\x9f\x84\x5b\x11\x2b\x6f\xc6\x89\x5f\xcf\x4f\xf5\x0e\x37\xf4\x2c\xe4\x6f\x00\x00\x00\xff\xff\xf5\x3b\xe1\x89\x10\x04\x00\x00")

func mapping_static_partials_analysis_charfilter_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_analysis_charfilter_html,
		"mapping_static/partials/analysis/charfilter.html",
	)
}

func mapping_static_partials_analysis_charfilter_html() (*asset, error) {
	bytes, err := mapping_static_partials_analysis_charfilter_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/analysis/charfilter.html", size: 1040, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_analysis_charfilters_generic_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func mapping_static_partials_analysis_charfilters_generic_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_analysis_charfilters_generic_html,
		"mapping_static/partials/analysis/charfilters/generic.html",
	)
}

func mapping_static_partials_analysis_charfilters_generic_html() (*asset, error) {
	bytes, err := mapping_static_partials_analysis_charfilters_generic_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/analysis/charfilters/generic.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_analysis_charfilters_regexp_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x8f\x41\x8e\x83\x30\x0c\x45\xd7\xe1\x14\x51\xf6\x0c\x17\x08\xec\xe6\x02\x73\x83\x4c\x62\x20\x92\x89\x23\xc7\x8c\x98\xdb\x37\x40\x17\xad\xd4\x4a\x6d\x57\x89\x2c\xbf\xef\xff\x94\x0d\xf1\x4f\x7b\x74\xa5\xf4\x66\x24\x5e\xda\x89\x69\xcd\x66\x68\x94\xb2\xe8\x7e\x01\x75\x9d\xf6\xc6\xcf\x8e\xc7\x88\x02\xfc\x03\x13\x6c\x75\xa1\xbe\x2b\x3a\xd6\xdf\x5b\x66\x28\x25\x52\xb2\xdd\x01\xec\xa8\xb2\x31\xe5\x55\x74\x9a\xda\x85\x02\xe0\x6d\xc0\x17\x9f\x09\x5a\xfe\x33\xf4\x46\x60\x13\x73\xd7\xc0\x53\x12\x26\x34\x3a\x86\x07\x87\x75\x46\xe7\x61\x26\x0c\x50\x7b\xed\x45\x6d\x57\x1d\x86\xa6\xf9\xc4\xe5\x08\xdb\x65\x8e\xcf\x02\x49\x5e\xb7\x38\xd9\xf7\x35\xae\xdc\x13\x8f\x4b\x00\x00\x00\xff\xff\x7e\x49\xa0\xae\x92\x01\x00\x00")

func mapping_static_partials_analysis_charfilters_regexp_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_analysis_charfilters_regexp_html,
		"mapping_static/partials/analysis/charfilters/regexp.html",
	)
}

func mapping_static_partials_analysis_charfilters_regexp_html() (*asset, error) {
	bytes, err := mapping_static_partials_analysis_charfilters_regexp_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/analysis/charfilters/regexp.html", size: 402, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_analysis_charfilters_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x54\x3d\x6f\xdb\x30\x10\xdd\xfd\x2b\x0e\x9c\x12\xa0\x92\x51\x74\x95\xb4\xf4\x63\xcc\xd4\xce\x05\x2d\x9e\x24\x22\x34\x49\x90\xa7\x38\x42\x90\xff\xde\x23\x15\xc9\x72\x9c\xba\x53\x17\xfb\x91\xf2\xbd\x0f\x3d\xd2\x15\xc9\x83\x41\x68\x8d\x8c\xb1\x16\xf3\x22\x7f\x16\x91\x82\xf6\xa8\x44\xb3\x03\xa8\x68\x40\xa9\x12\x4a\x38\xcc\x20\x6f\x37\x0f\xf2\x88\xd5\x9e\xc1\x66\xef\xe7\xe4\xaf\xf6\xce\x6b\x46\x99\x21\xed\xbc\xb1\x56\x74\x70\x6a\x5a\xf9\xc1\xf6\x45\x40\x8f\x92\x6a\x71\xd7\x76\x96\x25\x3e\xb5\xdd\x93\x34\xf7\xa0\x2d\x1c\xa5\xf7\xda\xf6\xa5\xb4\xd2\x4c\x51\xc7\xb2\x1d\x64\xf8\xdd\x69\x43\x18\xa2\x38\x6b\xaa\xe6\xe5\x65\x1e\x7e\x7d\x65\x2d\xf5\xfe\x09\xf3\x95\xc4\x4e\xaf\x9f\xbe\x41\x5e\x28\xfd\xb4\xbc\x9b\x03\xd9\xa2\x0f\x6e\xf4\xb0\xa2\xe2\x39\x0a\x08\xce\x60\x2d\xf2\x5a\x9c\x27\x79\xf6\x30\x12\x39\x9b\xb2\xb4\x46\xb7\x8f\xb5\x40\xa5\xe9\x2b\x7b\xfd\x91\xad\x2e\xc1\x60\x4e\x26\x20\x79\x61\x99\x3c\x25\x36\xaa\x59\x4f\x61\x27\x47\x43\x19\x3f\xc7\x0b\x21\x96\x8a\x5e\xda\x65\xa2\x37\x93\x1f\x74\xcb\xca\x2b\x2a\x92\xb2\x00\x19\xb4\x2c\x06\xad\x14\x5a\xae\x3a\x8c\x28\xb8\x95\x34\xda\xc0\x77\xfe\xc1\xd6\xfb\x7e\xb6\x71\x3b\x8f\x42\x83\x84\x57\x89\xfe\x6f\x14\x0a\x32\x0e\x37\xb3\x7c\xcb\xb6\x6e\xa6\xa9\xf6\x5c\xec\xda\xf8\xda\xfe\x72\x32\xd7\x43\x18\x07\x77\xaa\xc5\x2f\xd2\x26\x96\x8f\x38\xc5\xbb\x9b\x67\xef\xbe\x34\x68\x7b\x1a\xa0\x82\xcf\xdb\x73\x08\xad\x33\xc9\x5a\x2d\xbe\x88\xe6\xc1\x59\xbc\x56\xe4\xef\xe5\x06\x54\xd4\x39\x47\x1f\xdc\xb5\x4b\x9e\xdd\xdf\x7b\xb1\x78\xda\x94\xf2\xaf\x3a\xe2\xf1\xa2\x15\x3f\x1a\x53\x04\xdd\x0f\xc4\x5e\xf1\x04\x89\x49\xb6\x4c\x04\x33\xdf\xfb\x97\xf9\x61\x96\x39\x01\x83\xf4\x4f\xd2\xec\x76\x7f\x02\x00\x00\xff\xff\xc2\x74\xec\xbd\x66\x04\x00\x00")

func mapping_static_partials_analysis_charfilters_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_analysis_charfilters_html,
		"mapping_static/partials/analysis/charfilters.html",
	)
}

func mapping_static_partials_analysis_charfilters_html() (*asset, error) {
	bytes, err := mapping_static_partials_analysis_charfilters_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/analysis/charfilters.html", size: 1126, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_analysis_tokenfilter_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\xcd\x8e\x9b\x30\x10\x3e\x87\xa7\xb0\x7c\x6a\x0f\x14\xb5\x7b\x05\x2e\x2b\xf5\xd6\xbd\x74\x5f\xc0\x98\x09\x58\x19\x6c\x64\x0f\xdb\x46\x51\xde\xbd\x63\x3b\x34\x90\x48\x55\x57\x5a\x67\x34\x3f\xdf\x7c\xdf\xcc\x50\xf7\xe6\x43\x68\x54\x21\x34\x72\x72\xbd\xc2\x72\x04\xd5\x83\x97\x6d\x21\xf8\xaf\x1e\x5f\xf6\x51\x32\x84\x20\xdb\xd7\x25\x90\x9b\xc4\xbb\x3b\x81\x15\xdf\x0d\x12\xf8\xba\x1a\x5f\xda\xa2\xae\x18\x90\x7f\x9e\x60\x3b\xd7\x9f\x19\xb4\x38\xa4\x90\x1d\xca\x30\xba\x5f\x8d\x04\xef\x9d\xff\x01\x21\xa8\x01\xe4\x5a\xa1\x10\x3c\x89\xf4\x96\xbd\xb2\x03\xf8\x58\xa0\xd1\xa9\x93\x14\xde\x21\xdc\x52\x64\x2b\x2e\x97\x2d\xc2\xf5\xca\xf8\x99\x01\x1b\x47\xe7\xa7\x15\x32\xda\x6b\x6d\xb2\xdb\xe2\x70\xd8\xb2\x8c\xce\x72\xf0\x6e\x99\x53\xe8\x50\xa3\xea\x00\x05\xbb\x1b\x49\x56\x4d\x2c\xfa\x8d\xdf\xba\x4a\xfe\x9c\x62\xec\xbc\x50\xa4\xc6\x12\x01\x1b\x99\xd2\x04\x9d\x67\x6e\x42\xf0\x9b\xe4\x0e\x5c\x3b\x4b\x4c\x40\x0a\xd3\xaf\x90\x62\x46\xa5\x61\x74\xc8\x13\x6f\xe4\x5b\xea\x12\x79\xad\x12\xfe\x9f\x61\x5c\xc4\x31\xed\x21\xb6\x97\xed\x3b\xbf\x3b\xae\x1b\x20\xed\xb0\x0c\x53\xf9\xf5\x9b\x48\x02\x76\x98\x01\x10\x74\xd2\xa4\xc7\x38\xf9\x1b\x74\x5e\x71\x04\x7d\x4d\xee\x4f\x9f\xe5\x46\xf7\xa6\xfb\x97\xd4\xfe\x1f\xba\x1f\x89\x16\x87\x78\x67\xdc\xd9\xcd\x64\x9c\x8d\xa8\x1e\x66\x50\xf4\xd8\x99\xc9\x8a\x07\x2e\x41\xb6\x97\xcb\xde\x77\xbd\xd6\x55\x46\x5a\x91\xeb\x2a\x6b\xca\xfa\xf2\x64\x9f\x46\xfc\xf7\x1e\x9f\xa5\x70\xc8\x58\x8d\x4b\x0f\x22\x78\x9d\x35\xcd\x8a\x46\x59\x71\x79\x3c\xb7\xe8\x60\x73\x45\x7c\x3e\xfd\xa3\x73\x74\xff\xa2\xba\x85\x88\x75\xde\x32\x3a\xb2\x82\xff\xcb\x1e\x8e\x6a\x41\x92\xf9\xd0\x8d\x3e\xf1\x9a\x94\xd5\x80\x3c\xe9\xf6\x35\x59\x75\x95\x4b\xf7\x38\xf7\xfc\x6e\x31\xd8\xc7\xc5\xe4\x03\xcc\x71\xf9\xd8\x68\xf6\x66\x52\xfe\x2c\xe6\x05\xb1\xf4\x66\x18\xf9\x2b\xfa\xa9\x3e\xe0\x8e\x9e\x85\xfc\x09\x00\x00\xff\xff\x9e\x79\x6a\x50\x19\x04\x00\x00")

func mapping_static_partials_analysis_tokenfilter_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_analysis_tokenfilter_html,
		"mapping_static/partials/analysis/tokenfilter.html",
	)
}

func mapping_static_partials_analysis_tokenfilter_html() (*asset, error) {
	bytes, err := mapping_static_partials_analysis_tokenfilter_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/analysis/tokenfilter.html", size: 1049, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_analysis_tokenfilters_dict_compound_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\xbd\xae\x84\x20\x10\x85\x6b\x7d\x8a\x09\xbd\x97\x17\x40\xdf\xe0\xde\xe6\x6e\xb2\xa5\x41\x18\x0d\x59\x60\x08\xe0\x36\xc6\x77\x5f\xfc\x2b\x2c\x96\x6a\x72\x72\x3e\xbe\xc9\x54\x42\x9b\x37\x28\x2b\x53\x6a\xd9\x48\xd1\x35\x53\xa4\x39\xb0\xae\xae\x2a\x61\xe5\x80\x16\x4a\xda\xb2\x4c\x2f\xf4\xa3\xb1\x19\xe3\x63\x1b\x7f\x65\x48\xac\xfb\x9f\x07\x78\x52\xd4\x49\xf0\xbd\xbb\x53\x09\x2d\xaa\x0c\x7e\x6a\x1c\x69\xb4\x37\xf6\x47\x1b\x95\xfb\x3d\xe8\x9d\x0c\xec\x66\x56\xe4\x73\x24\xcb\xc0\xe8\x6f\xc2\x1a\xca\x2b\x0e\x0a\xd9\x90\xdf\x1c\x11\x03\xca\x7c\xf6\x4b\x09\x8c\x87\x6b\xfe\x93\x0e\x0b\xb4\x2c\x57\xb0\xae\x82\x1f\xe8\xf9\x93\xe0\xc7\xb6\x65\x71\xc1\xcb\x25\xba\x4f\x00\x00\x00\xff\xff\x61\x16\x44\xb1\x10\x01\x00\x00")

func mapping_static_partials_analysis_tokenfilters_dict_compound_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_analysis_tokenfilters_dict_compound_html,
		"mapping_static/partials/analysis/tokenfilters/dict_compound.html",
	)
}

func mapping_static_partials_analysis_tokenfilters_dict_compound_html() (*asset, error) {
	bytes, err := mapping_static_partials_analysis_tokenfilters_dict_compound_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/analysis/tokenfilters/dict_compound.html", size: 272, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_analysis_tokenfilters_edge_ngram_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x90\x41\x6e\xc4\x20\x0c\x45\xd7\xe4\x14\xc8\xfb\x69\x2e\x40\xd8\x75\xd9\x43\x10\x70\x52\x34\x0e\x46\x84\x54\xd3\xdb\xd7\x4c\xbb\x41\xd5\x48\xa3\xcc\xc6\x92\xf3\xfd\x7f\xde\x47\x99\x10\xbf\xb4\x27\xb7\xef\x13\x2c\x5c\xb6\xcb\x5a\xf8\xc8\x60\x07\xa5\x0c\xb9\x19\x49\xcb\xd7\x09\x2a\x5f\x31\x2d\x91\x2a\x96\xf7\xb0\x22\xd8\x36\xcd\x78\xbf\x68\xb7\xca\xec\x48\xe8\x6b\x17\xe5\x39\xd5\xc2\x04\x3a\x86\xff\x09\x3a\xad\x97\x8d\x03\x52\x27\xbd\xe1\x3d\xbd\x25\x2a\xc3\xb9\x46\x4e\x76\x29\x92\x63\xc6\xbf\xad\x93\x66\xe7\xaf\x9d\x62\xc6\x5f\x0e\x59\xcc\x28\xd5\xec\x30\x9c\xa8\xf8\x11\x13\x58\x19\x5d\xc1\x98\xf2\x51\x1f\x50\x6f\x62\xd0\xf5\x3b\xe3\x04\xe9\xd8\x66\x2c\xf0\xd4\x43\xb4\xff\xe8\x4c\xce\xe3\x27\x53\x40\x81\x80\x17\xc1\xdd\x4d\xc0\xdd\xed\x79\x70\x31\x9c\x01\x6f\xb6\x07\xe0\x3f\x01\x00\x00\xff\xff\xa6\xc2\x37\x43\x53\x02\x00\x00")

func mapping_static_partials_analysis_tokenfilters_edge_ngram_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_analysis_tokenfilters_edge_ngram_html,
		"mapping_static/partials/analysis/tokenfilters/edge_ngram.html",
	)
}

func mapping_static_partials_analysis_tokenfilters_edge_ngram_html() (*asset, error) {
	bytes, err := mapping_static_partials_analysis_tokenfilters_edge_ngram_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/analysis/tokenfilters/edge_ngram.html", size: 595, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_analysis_tokenfilters_elision_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\x3d\xce\xc3\x20\x0c\x86\xe7\xe4\x14\x88\x3d\x1f\x17\x20\x91\xbe\x03\xb4\x53\xf7\x88\x12\x27\x42\x35\x18\x01\xed\x12\xe5\xee\x75\xfe\x86\x0c\x65\xb2\x5e\xbd\x0f\x8f\xe5\x4a\x0f\xee\x23\x2c\x9a\x9c\x5b\x39\x52\xf2\xcd\x94\xe8\x1d\x65\x57\x57\x95\x46\xf3\x04\x14\x9c\xb6\xb2\xd0\x0b\xc2\xe8\xb0\x40\x7a\xac\xe3\xcd\xc4\x2c\xbb\xff\x54\x9c\x45\xc8\x5a\x6d\xd5\x0d\xca\x80\x60\x8b\x08\x53\xe3\x69\x00\xbc\xa0\x7f\xe6\x00\xfa\x2d\xec\xbd\x89\xf2\x22\xb7\x14\x4a\x22\x94\xc2\x0d\xbf\x9c\xb5\xe0\xc7\x1e\x8a\xc5\x51\x58\x3d\x09\x22\x98\x72\xf4\xb9\x24\x5c\x10\xe7\x7c\x37\x1e\x18\x9a\xe7\x33\x58\x16\xad\x76\xf4\xf8\x49\xab\x7d\x63\x5e\x5e\x2b\x3e\x46\xf7\x0d\x00\x00\xff\xff\x97\x76\x02\xbd\x13\x01\x00\x00")

func mapping_static_partials_analysis_tokenfilters_elision_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_analysis_tokenfilters_elision_html,
		"mapping_static/partials/analysis/tokenfilters/elision.html",
	)
}

func mapping_static_partials_analysis_tokenfilters_elision_html() (*asset, error) {
	bytes, err := mapping_static_partials_analysis_tokenfilters_elision_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/analysis/tokenfilters/elision.html", size: 275, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_analysis_tokenfilters_generic_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func mapping_static_partials_analysis_tokenfilters_generic_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_analysis_tokenfilters_generic_html,
		"mapping_static/partials/analysis/tokenfilters/generic.html",
	)
}

func mapping_static_partials_analysis_tokenfilters_generic_html() (*asset, error) {
	bytes, err := mapping_static_partials_analysis_tokenfilters_generic_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/analysis/tokenfilters/generic.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_analysis_tokenfilters_keyword_marker_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\x4d\x0e\x83\x20\x10\x85\xd7\x7a\x0a\xc2\xde\x72\x01\xf4\x02\x4d\xbb\xea\xde\x50\x19\x0d\x11\x18\x02\xb4\x4d\x63\xbc\x7b\xc7\xbf\x85\x8b\xb2\x9a\xbc\xbc\x8f\x6f\x32\x85\xd4\xe6\xcd\x3a\xab\x52\xaa\x79\x8f\xd1\x55\x43\xc4\x57\xe0\x4d\x59\x14\xd2\xaa\x27\x58\x46\x69\xcd\x33\x8e\xe0\x7b\x63\x33\xc4\xc7\x32\xde\x54\x48\xbc\xb9\xc2\xf7\x83\x51\x27\x29\xd6\xea\x0a\x25\xb0\xd0\x65\xe6\x87\xca\xa1\x06\x7b\x42\x2f\xe3\x0e\xb4\x6b\xd8\x3a\x15\xf8\x49\xde\xa1\xcf\x11\x2d\x67\x46\xff\x73\x96\x8c\x1e\x79\x30\x64\x83\x7e\xf1\x44\x08\xa0\xf2\xde\xa7\x12\x33\x9e\x1d\xf3\x5d\x39\x20\x68\x9a\x8e\x60\x9e\xa5\xd8\xd0\xfd\x27\x29\xb6\x8d\x69\x79\x29\xe8\x18\xcd\x2f\x00\x00\xff\xff\x4f\xfe\x32\xc4\x13\x01\x00\x00")

func mapping_static_partials_analysis_tokenfilters_keyword_marker_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_analysis_tokenfilters_keyword_marker_html,
		"mapping_static/partials/analysis/tokenfilters/keyword_marker.html",
	)
}

func mapping_static_partials_analysis_tokenfilters_keyword_marker_html() (*asset, error) {
	bytes, err := mapping_static_partials_analysis_tokenfilters_keyword_marker_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/analysis/tokenfilters/keyword_marker.html", size: 275, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_analysis_tokenfilters_length_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xce\x41\xae\x83\x30\x0c\x04\xd0\x75\x38\x45\xe4\x3d\x9f\x0b\x04\x6e\xf0\x0f\x11\x88\xa1\x51\x1d\x3b\x0a\xa1\xa2\xb7\xaf\xe9\x0e\x55\x95\x2a\x36\x59\xc4\x33\x9a\x67\x5c\x88\x0f\x3b\x91\x5f\xd7\x1e\x66\x29\xa9\x5d\x8a\x6c\x19\x86\xc6\x18\x47\x7e\x44\xb2\xfa\xdb\x43\x95\x3b\xf2\x1c\xa9\x62\xf9\x8f\x0c\x83\x3e\xae\x7b\xdf\x8f\xa4\x71\x91\xf3\x56\x2d\x2f\x6d\x92\x80\x74\xca\xff\x25\x2d\xd8\xfa\xcc\xd8\x03\x6f\x69\xc4\x02\xa7\xc1\x49\xb8\x16\x21\xb0\x31\x7c\xec\xd8\x4c\x7e\xc2\x9b\x50\x40\x45\x1c\x2a\xd7\x29\x78\x68\x9a\x2b\x70\xbf\x2b\xdc\xef\xbf\xc3\xb5\x70\x05\x7e\xd4\xbe\xc0\x5f\x01\x00\x00\xff\xff\xc5\x81\x9e\x7b\x70\x01\x00\x00")

func mapping_static_partials_analysis_tokenfilters_length_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_analysis_tokenfilters_length_html,
		"mapping_static/partials/analysis/tokenfilters/length.html",
	)
}

func mapping_static_partials_analysis_tokenfilters_length_html() (*asset, error) {
	bytes, err := mapping_static_partials_analysis_tokenfilters_length_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/analysis/tokenfilters/length.html", size: 368, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_analysis_tokenfilters_ngram_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xce\x41\xae\x83\x30\x0c\x04\xd0\x75\x38\x45\xe4\x3d\x9f\x0b\x04\x6e\xf0\x0f\x11\x88\xa1\x51\x1d\x3b\x0a\xa1\xa2\xb7\xaf\xe9\x0e\x55\x95\x2a\x36\x59\xc4\x33\x9a\x67\x5c\x88\x0f\x3b\x91\x5f\xd7\x1e\x66\x29\xa9\x5d\x8a\x6c\x19\x86\xc6\x18\x47\x7e\x44\xb2\xfa\xdb\x43\x95\x3b\xf2\x1c\xa9\x62\xf9\x8f\x0c\x83\x3e\xae\x7b\xdf\x8f\xa4\x71\x91\xf3\x56\x2d\x2f\x6d\x92\x80\x74\xca\xff\x25\x2d\xd8\xfa\xcc\xd8\x03\x6f\x69\xc4\x02\xa7\xc1\x49\xb8\x16\x21\xb0\x31\x7c\xec\xd8\x4c\x7e\xc2\x9b\x50\x40\x45\x1c\x2a\xd7\x29\x78\x68\x9a\x2b\x70\xbf\x2b\xdc\xef\xbf\xc3\xb5\x70\x05\x7e\xd4\xbe\xc0\x5f\x01\x00\x00\xff\xff\xc5\x81\x9e\x7b\x70\x01\x00\x00")

func mapping_static_partials_analysis_tokenfilters_ngram_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_analysis_tokenfilters_ngram_html,
		"mapping_static/partials/analysis/tokenfilters/ngram.html",
	)
}

func mapping_static_partials_analysis_tokenfilters_ngram_html() (*asset, error) {
	bytes, err := mapping_static_partials_analysis_tokenfilters_ngram_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/analysis/tokenfilters/ngram.html", size: 368, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_analysis_tokenfilters_normalize_unicode_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\x3d\x12\xc2\x20\x10\x85\x6b\x3c\x05\x43\x1f\xb9\xc0\x86\xd2\xd2\xce\x03\x44\xd8\x64\x98\x6c\x76\x33\x04\x2d\x3c\xbd\x9b\x68\x13\x67\x62\xf7\x78\x3f\xdf\x00\x06\x52\x7e\xda\x48\xdd\xb2\xb4\xae\x97\x32\x35\x43\x91\xc7\xec\xc2\xc9\x18\xa0\xee\x8e\x64\xd5\x6d\x5d\x95\x11\xb9\xcf\x54\xb1\x5c\xb5\xd5\x51\x7e\xe1\x8d\x73\x94\x84\x2e\x5c\xd4\x01\xbf\xb5\xd7\x9d\x81\x05\x09\x63\xdd\x61\xa3\x70\x2d\x42\xce\xe6\xf4\x9f\x66\x79\x68\x26\x15\xb4\xab\x9d\x57\xc8\x76\x2b\xc5\xcb\x5c\xb3\x70\xe0\x3e\x82\xff\xea\x9f\x20\x1d\x05\xe3\xe1\x64\xdc\x6f\xc0\x7f\x1e\xa1\x07\xf0\xfa\x47\xe1\x1d\x00\x00\xff\xff\xd1\xd9\xe9\x1f\x2a\x01\x00\x00")

func mapping_static_partials_analysis_tokenfilters_normalize_unicode_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_analysis_tokenfilters_normalize_unicode_html,
		"mapping_static/partials/analysis/tokenfilters/normalize_unicode.html",
	)
}

func mapping_static_partials_analysis_tokenfilters_normalize_unicode_html() (*asset, error) {
	bytes, err := mapping_static_partials_analysis_tokenfilters_normalize_unicode_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/analysis/tokenfilters/normalize_unicode.html", size: 298, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_analysis_tokenfilters_shingle_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x92\xc1\x6e\xc3\x20\x0c\x86\xcf\xc9\x53\x20\xee\x5d\x5f\x20\xe1\x38\x69\x87\x69\x87\xed\x3e\x11\x70\x52\x54\x07\x47\x04\xa6\xec\xed\x67\xd6\x64\x52\xb5\x55\x62\x6d\x2f\x06\x61\xff\xfa\xbf\x5f\xa6\x6a\xac\xfb\x10\x06\xf5\x3c\xb7\xb2\xa7\x30\xee\x86\x40\x69\x92\xaa\xae\xaa\x06\x75\x07\x28\xf8\xb5\x95\x91\x8e\xe0\x7b\x87\x11\xc2\xb3\xf3\x52\x71\x69\xf6\xdf\xfd\x3c\x59\x35\xce\x4f\x29\x0a\x3f\xec\x46\xb2\x80\x67\xf3\x0f\x23\x0b\x44\xfc\x9c\xa0\x95\x3e\x8d\x1d\x04\x79\x66\x68\xc8\xc7\x40\x28\x85\xb3\xbf\x7c\xc4\x84\xda\xc0\x81\xd0\x02\x43\x64\xaa\x66\xcf\xc0\xaa\xae\xaf\x01\xd7\x0b\x83\xeb\xa5\x1c\x9c\x05\xd7\x80\x67\xd9\x3d\xc1\x9f\xbc\xc1\x64\x41\xaa\xf5\x22\x5e\x82\x1b\x9c\xd7\x28\xde\xf2\xd0\x1f\x79\xc4\x85\x44\x94\x22\xb7\xdf\x69\xd5\x6f\xe9\xcc\x01\xcc\xb1\xa3\xa5\x2c\xdf\x0f\xce\x4d\xa1\x5e\x81\xdb\x5c\x74\xd0\x91\x42\xf1\x4e\xe6\x4d\xb1\xb1\x47\x58\x62\x19\x77\x76\xbc\xeb\x5e\x1e\x1d\x22\x7f\x0a\x75\x3a\x8b\x23\xf4\x27\xd9\xbf\xf9\x57\xbb\x4b\x11\xbe\x02\x00\x00\xff\xff\x4a\x38\x26\x08\xcb\x03\x00\x00")

func mapping_static_partials_analysis_tokenfilters_shingle_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_analysis_tokenfilters_shingle_html,
		"mapping_static/partials/analysis/tokenfilters/shingle.html",
	)
}

func mapping_static_partials_analysis_tokenfilters_shingle_html() (*asset, error) {
	bytes, err := mapping_static_partials_analysis_tokenfilters_shingle_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/analysis/tokenfilters/shingle.html", size: 971, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_analysis_tokenfilters_stop_tokens_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\x3d\x8e\xc3\x20\x10\x85\x6b\xfb\x14\x23\x7a\x2f\x17\xc0\xbe\xc1\x6e\xb3\x91\x52\x5a\xc4\x8c\x2d\x14\x60\x10\x90\x34\x96\xef\x9e\xf1\x5f\xe1\x22\x54\xa3\xa7\xf7\xf1\x8d\xa6\x52\xc6\xbe\x61\x70\x3a\xe7\x56\x8c\x94\x7c\x33\x25\x7a\x45\xd1\xd5\x55\xa5\x9c\x7e\xa0\x03\x4e\x5b\x51\xe8\x89\x61\xb4\xae\x60\xba\xad\xe3\xaf\x8e\x59\x74\xff\x85\x22\xdc\x29\x99\xac\xe4\x56\xde\xb0\x8c\x0e\x87\x02\x61\x6a\x3c\x19\x74\x17\xf8\x27\x33\xd2\x6f\x41\xef\x75\x14\x17\xf5\x40\xa1\x24\x72\x02\xac\xf9\x66\xac\x81\x1f\x3b\x28\x16\x4b\x61\x75\x24\x8c\xa8\xcb\xd1\xe7\x12\xd8\x00\xe7\xfc\xa7\x3d\x32\x34\xcf\x67\xb0\x2c\x4a\xee\xe8\xf1\x93\x92\xfb\xb6\xbc\xb8\x92\x7c\x8a\xee\x13\x00\x00\xff\xff\x16\x19\x03\x3e\x11\x01\x00\x00")

func mapping_static_partials_analysis_tokenfilters_stop_tokens_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_analysis_tokenfilters_stop_tokens_html,
		"mapping_static/partials/analysis/tokenfilters/stop_tokens.html",
	)
}

func mapping_static_partials_analysis_tokenfilters_stop_tokens_html() (*asset, error) {
	bytes, err := mapping_static_partials_analysis_tokenfilters_stop_tokens_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/analysis/tokenfilters/stop_tokens.html", size: 273, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_analysis_tokenfilters_truncate_token_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8e\xc1\x0d\x83\x30\x0c\x45\xcf\xe9\x14\x96\xef\x94\x05\x02\x13\x74\x09\x20\x06\xa2\x3a\x76\x14\x9c\x4a\xdd\xbe\x81\x1b\xea\xc5\x07\xeb\x7d\xbd\xe7\x7c\x88\x1f\x58\x78\x3a\x8e\x01\x57\x2d\xa9\xdb\x8a\xd6\x8c\xe3\xc3\x39\xcf\xd3\x4c\x0c\xed\x3b\xa0\xe9\x9b\x64\x8d\x6c\x54\x5e\x24\x38\xb6\xb3\xd9\xee\xfb\x0b\x39\x61\xe7\xa3\xe4\x6a\x20\x5b\x97\x34\x10\xdf\x26\x4f\xbe\x70\x04\xfb\x66\x1a\x50\x6a\x9a\xa9\xe0\x4d\xbb\xa8\x58\x51\x46\x88\xe1\xcf\x06\x99\xa7\x85\x76\xe5\x40\x2d\xe5\x6c\xf3\x7d\xcb\x1e\x7f\x01\x00\x00\xff\xff\x0a\x91\xf6\x26\xbd\x00\x00\x00")

func mapping_static_partials_analysis_tokenfilters_truncate_token_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_analysis_tokenfilters_truncate_token_html,
		"mapping_static/partials/analysis/tokenfilters/truncate_token.html",
	)
}

func mapping_static_partials_analysis_tokenfilters_truncate_token_html() (*asset, error) {
	bytes, err := mapping_static_partials_analysis_tokenfilters_truncate_token_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/analysis/tokenfilters/truncate_token.html", size: 189, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_analysis_tokenfilters_wordmap_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8e\x31\x0a\xc3\x30\x0c\x45\x67\xf7\x14\xc2\x7b\x9a\x0b\x24\xb9\x41\x3b\x75\x2f\xc6\x56\x8a\xa9\x2d\x19\x59\xd0\x21\xe4\xee\x75\x48\x3d\x54\xd3\x47\xfc\xf7\xf8\xc6\x98\xa9\x62\x42\xaf\x40\xaf\x21\x73\xc0\x34\x5b\xe5\x37\xd2\x1a\x93\xa2\x5c\x3f\x2c\xe1\x99\x5d\xb1\xe0\x93\xab\x75\xb6\x2b\x4b\x1e\x3c\x93\x0a\x27\x0b\x31\xfc\xd5\x1f\x47\xbc\xb9\x52\xed\x72\x31\xd0\xae\xe9\xb9\x68\x64\x3a\xf4\x82\x05\x9d\xfe\x80\xd6\x82\x48\xd0\xf3\xdd\x65\x6c\xd4\xb6\xf5\xc7\xbe\x4f\xe3\x89\x76\xd5\x34\x9e\x4b\x97\x6f\x00\x00\x00\xff\xff\x38\x1c\x9d\x3b\xb5\x00\x00\x00")

func mapping_static_partials_analysis_tokenfilters_wordmap_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_analysis_tokenfilters_wordmap_html,
		"mapping_static/partials/analysis/tokenfilters/wordmap.html",
	)
}

func mapping_static_partials_analysis_tokenfilters_wordmap_html() (*asset, error) {
	bytes, err := mapping_static_partials_analysis_tokenfilters_wordmap_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/analysis/tokenfilters/wordmap.html", size: 181, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_analysis_tokenfilters_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x54\xb1\x6e\xdb\x30\x10\xdd\xfd\x15\x07\x4e\x09\x50\x29\x28\xba\x4a\x9a\xda\x8e\x99\xd2\xb9\xa0\xc5\x93\x44\x98\x26\x09\xf2\x14\x47\x08\xf2\xef\x3d\x52\x91\x2c\xc7\xa9\x3b\x75\xb1\x1f\x4f\xbe\x7b\xef\xe9\x1d\x5d\x91\xdc\x1b\x84\xd6\xc8\x18\x6b\x31\x1f\xf2\x67\x11\x29\x68\x8f\x4a\x34\x3b\x80\x8a\x06\x94\x2a\xa1\x84\xc3\x0c\x72\xb9\x79\x94\x47\xac\x1e\x18\x6c\x6a\x4f\x93\xbf\xaa\x9d\xcf\x8c\xf2\x84\x54\x79\x9f\x5a\xd1\xde\xa9\x69\x9d\x0f\xb6\x2f\x02\x7a\x94\x54\x8b\x3b\xea\x2c\x53\x7c\xa1\xee\x59\x9a\x7b\xd0\x16\x8e\xd2\x7b\x6d\xfb\x52\x5a\x69\xa6\xa8\x63\x49\xee\x80\xf6\x77\xa7\x0d\x61\x88\xe2\x4c\xaa\x9a\xd7\xd7\xb9\xfb\xed\x8d\xc9\xd4\xc7\x27\x3c\xb0\x24\x96\x7a\xfd\xf4\x1d\xf2\x41\xe9\xe7\xe5\xe5\xec\xc9\x16\x7d\x70\xa3\x87\x15\x15\x2f\x51\x40\x70\x06\x6b\x91\xcf\xe2\xdc\xc9\xbd\xfb\x91\xc8\xd9\x64\xa6\x35\xba\x3d\xd4\x02\x95\xa6\xa7\x24\xf6\x67\xd6\xba\x58\x83\xd9\x9b\x80\x24\x86\x79\x72\x9b\xd8\xd0\x66\x42\x85\x9d\x1c\x0d\x65\xfc\x12\x2f\x98\x98\x2b\x7a\x69\x97\x8e\xde\x4c\x7e\xd0\x2d\x53\xaf\xa8\x48\xd4\x02\x64\xd0\xb2\x18\xb4\x52\x68\x39\xec\x30\xa2\xe0\x5c\x52\x6b\x03\x3f\xf8\x07\x5b\xf1\x0f\xb3\x8c\xdb\x86\x14\x1a\x24\xbc\xb6\xf4\x7f\xbd\x50\x90\x71\xb8\x69\xe6\x7b\xd6\x75\xd3\x4e\xf5\xc0\xd1\xae\x99\xaf\xf9\x2f\xcb\xb9\xee\x61\x1c\xdc\xa9\x16\xbf\x48\x9b\x58\x1e\x70\x8a\x77\xb7\xd7\xef\xbe\x34\x68\x7b\x1a\xa0\x82\xaf\xdb\x55\x84\xd6\x99\xa4\xad\x16\xdf\x44\xf3\xe8\x2c\x5e\x53\xf2\xf7\x72\x0b\x2a\xea\x9c\xa3\x4f\xee\xdb\xe5\x9c\xdd\xdf\x93\xb1\x78\xda\xc6\xf2\xaf\x40\xe2\xf1\x22\x17\x3f\x1a\x53\x04\xdd\x0f\xc4\x62\xf1\x04\x79\x14\xcc\xb3\x3e\xbe\xca\x4f\x8d\xcc\xf2\x19\xa4\xbf\x92\x66\xb7\xfb\x13\x00\x00\xff\xff\xca\x2c\x8b\x99\x67\x04\x00\x00")

func mapping_static_partials_analysis_tokenfilters_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_analysis_tokenfilters_html,
		"mapping_static/partials/analysis/tokenfilters.html",
	)
}

func mapping_static_partials_analysis_tokenfilters_html() (*asset, error) {
	bytes, err := mapping_static_partials_analysis_tokenfilters_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/analysis/tokenfilters.html", size: 1127, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_analysis_tokenizer_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\xcd\x8e\x9b\x30\x10\x3e\x87\xa7\xb0\x7c\x6a\x0f\x14\xb5\x7b\x05\x2e\x39\x77\x2f\xdd\x17\x30\x66\x02\x56\x06\x1b\xd9\xc3\xb6\x69\x94\x77\xef\xd8\x5e\x36\xb0\x91\xaa\x8d\x14\x33\x9a\x9f\x6f\xbe\x6f\x3c\xae\x7b\xf3\x2a\x34\xaa\x10\x1a\x39\xb9\x5e\x61\x39\x82\xea\xc1\xcb\xb6\x10\xfc\xab\xc7\xa7\x7d\x94\x0c\x21\xc8\xf6\xb8\x04\x72\x93\x78\x71\x67\xb0\xe6\x2f\xf8\xba\x1a\x9f\xda\xa2\xae\x18\x8d\x3f\x0f\x98\x9d\xeb\x2f\x8c\x58\x1c\x52\xc8\x0e\x65\x18\xdd\xef\x46\x82\xf7\xce\xff\x84\x10\xd4\x00\x72\xad\x50\x08\x9e\x44\x3a\xcb\x5e\xd9\x01\x7c\x2c\xd0\xe8\xd4\x59\x0a\xef\x10\xde\x52\x64\x2b\xae\xd7\x2d\xc2\xed\xc6\xf8\x99\x01\x1b\x27\xe7\xa7\x15\x32\xda\x6b\x6d\xb2\xdb\xe2\x70\xd8\xb2\x8c\xce\x72\xf0\x6e\x99\x53\xe8\x50\xa3\xea\x00\x05\xbb\x1b\x49\x56\x4d\xac\xf8\x99\xcf\xba\x4a\xfe\x9c\x62\xec\xbc\x50\xa4\xc6\x12\x01\x1b\x99\xd2\x04\x5d\x66\x6e\x42\xf0\x87\xe4\x0e\x5c\x3b\x4b\x4c\x40\x0a\xd3\xaf\x90\x62\x46\xa5\x61\x74\xc8\xe3\x6e\xe4\x73\xea\x12\x79\xad\x12\x3e\xcf\x70\xbd\x85\xd8\x5c\xb6\x2f\x7c\xee\x98\x6e\x60\xb4\xc3\x32\x4c\xe5\xf7\x1f\x22\xd1\xdf\x21\x06\x40\xd0\x49\x91\x1e\xe3\xdc\x37\xc0\x11\xf2\x98\x9c\x5f\xbe\xca\x8d\xe6\xf7\x84\x6f\xa9\xf5\x7f\x14\xef\x29\x16\x87\xb8\x5c\xdc\xd3\xcd\x64\x9c\x8d\x88\x1e\x66\x50\xb4\xef\xc9\x24\xc5\x8e\x43\x90\xed\xf5\xba\xf5\xdc\x6e\x75\x95\x31\x56\xcc\xba\xca\x3a\xb2\xa6\x3c\xcb\x87\xa1\xbe\x6f\xe0\x47\x01\x1c\x30\x56\xe3\xd2\x83\x08\x5e\x67\x25\xb3\xa2\x51\x56\x5c\x1c\xd7\x2b\x3a\xd8\x5c\xf1\x1e\x57\xfd\xe4\x1c\xdd\x9f\x4f\xb7\x10\xb1\xbe\xb7\x8c\x8e\xac\xe0\x7f\xd9\xc3\x49\x2d\x48\x32\x2f\xb6\xd1\x67\xbe\x18\x65\x35\x20\x4f\xb7\x3d\x26\xab\xae\x72\xe9\x1e\xe7\x9e\xdf\x2d\x06\xfb\x78\x19\x79\xe1\x72\x5c\x7e\x6c\x34\x7b\x33\x29\x7f\x11\xf3\x82\x58\x7a\x33\x8c\xfc\x6a\x7e\xa9\x57\xb8\xa3\x67\x21\xff\x02\x00\x00\xff\xff\x07\x95\x38\x72\x06\x04\x00\x00")

func mapping_static_partials_analysis_tokenizer_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_analysis_tokenizer_html,
		"mapping_static/partials/analysis/tokenizer.html",
	)
}

func mapping_static_partials_analysis_tokenizer_html() (*asset, error) {
	bytes, err := mapping_static_partials_analysis_tokenizer_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/analysis/tokenizer.html", size: 1030, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_analysis_tokenizers_exception_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\x41\x6f\xdb\x3c\x0c\x3d\xfb\xfb\x15\x84\xf0\x1d\x9a\x83\xeb\x66\x67\xc7\xc0\x30\xec\xb0\x4b\x51\x14\xfb\x03\x8a\xc5\xda\x42\x68\xc9\x90\xe4\x26\x59\xd0\xff\x3e\xda\xb2\x95\x64\x4d\xbb\xc3\x02\x04\x20\x14\xf2\x3d\xf2\xf1\x31\x00\xa5\xd2\xaf\x50\x93\xf4\x7e\x23\x5e\xac\xeb\xf2\xc6\xd9\xa1\x17\xd5\x7f\xc0\x9f\x92\xe4\x16\x09\xf8\x7d\x23\xf0\x20\xbb\x9e\xf0\x87\xe9\x87\xf0\xc4\xe9\x7b\xeb\xd4\x5a\x54\xdf\x0f\x35\xf6\x41\x5b\x03\x4f\x32\x04\x74\xc6\x97\xc5\x54\x15\x11\xb2\x72\xa0\x05\x9e\xb4\x0f\x33\x3c\x98\x26\xf7\xad\xdd\x6f\x44\xb0\x3b\x34\xfa\x17\xba\x7b\x5c\x90\xfc\x3d\xa1\x69\x42\x0b\x25\xac\xe7\x46\xb2\xac\x24\xfd\x1e\x27\xd7\x01\x3b\x51\x3d\x5a\x83\xcc\xaa\x17\xca\x62\x60\xf6\xec\x9f\xa8\x2b\x78\x10\x30\xe8\xdc\x5b\x17\xe4\x96\x70\xac\xea\xac\x42\xba\x5d\x26\x46\xbe\x51\xaf\x0f\x9b\x1c\x01\x1c\xf6\x28\x03\x4b\x09\xda\xc0\x2d\x18\x80\xe0\x64\xbd\x83\xed\x11\xfe\xd7\x46\xe1\x41\x54\xa5\xef\xa5\x59\x40\x1b\x3a\xf6\xad\xae\x59\xec\x14\xe5\x9d\x36\x03\xf3\x97\xc5\x98\x58\xc1\xe9\x04\x08\x6f\x6f\xb1\x8c\x39\x6b\xd2\xf5\x6e\x23\x1c\x76\xf6\x15\xd3\xb2\xee\x22\xfc\x4a\x7c\x86\x1c\x6b\xa0\x1f\x88\x72\xa7\x9b\x36\x24\x96\x28\x76\x36\x2b\xcd\x73\x17\xec\xa2\x29\xf8\xc8\x4d\xe3\x02\xcf\x5e\xda\xb7\x72\x02\x9b\x8d\x92\xf1\xaf\x17\x85\xb5\xa5\xdc\x77\xf9\xfa\x61\x5e\x3e\xc3\xea\xd1\x75\x17\x3b\x30\xb8\x77\xd8\xe0\x81\xd7\x19\x8e\x3d\xf2\x52\xf0\x10\xc4\x15\x33\x4f\x10\x9c\x25\x01\x5a\x8d\xe6\x9d\x07\x7f\x9e\xab\x7a\x92\x35\xb6\x96\x14\x72\x3b\x22\x19\x67\x1e\x63\x8c\xdf\x37\xf4\x65\xca\xe3\x5e\xb7\x43\x08\xf6\x52\x5d\xa9\xd4\x59\xda\xd0\x6a\xbf\x5a\xfa\x8a\xa9\xa9\xb3\x6d\x30\xc0\xdf\x5c\xe1\x8b\x1c\x28\x5c\x69\xfb\x55\xa9\xb2\x88\xf9\x33\x4f\x52\xf5\xaf\xf2\xfe\x79\xac\xd2\x48\x3a\xb2\xb7\x7e\x2e\x26\x13\x55\x0a\xc7\x0c\x78\xc6\x4e\x6a\xa3\x4d\x03\xd3\x41\x5f\xdd\x2c\x43\x79\x24\xac\x27\xc1\xeb\x56\x9a\x06\x2f\x5c\xff\x6d\x7a\x50\x77\x2b\x71\xf3\x26\x52\xf4\xc9\x36\xce\x39\x0b\x21\x53\xda\xf8\x2f\x72\x71\x26\x29\xed\xea\x5c\x1e\x65\x87\xec\xf7\xd3\x29\xbd\xb0\xdb\x8b\x58\x9d\xfa\x2f\xe2\x00\x67\xf1\x7e\x07\x00\x00\xff\xff\xd0\x93\x5d\xa0\xe9\x04\x00\x00")

func mapping_static_partials_analysis_tokenizers_exception_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_analysis_tokenizers_exception_html,
		"mapping_static/partials/analysis/tokenizers/exception.html",
	)
}

func mapping_static_partials_analysis_tokenizers_exception_html() (*asset, error) {
	bytes, err := mapping_static_partials_analysis_tokenizers_exception_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/analysis/tokenizers/exception.html", size: 1257, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_analysis_tokenizers_generic_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func mapping_static_partials_analysis_tokenizers_generic_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_analysis_tokenizers_generic_html,
		"mapping_static/partials/analysis/tokenizers/generic.html",
	)
}

func mapping_static_partials_analysis_tokenizers_generic_html() (*asset, error) {
	bytes, err := mapping_static_partials_analysis_tokenizers_generic_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/analysis/tokenizers/generic.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_analysis_tokenizers_regexp_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8f\x41\xae\xc2\x30\x0c\x44\xd7\xf9\xa7\xb0\xb2\xef\xef\x05\xd2\xee\xb8\x00\x37\x08\x8d\x29\x11\x6e\x1c\x39\x09\x0a\x9c\x1e\x17\x36\x20\x56\x96\xc6\x1e\xcf\x1b\xe3\x42\xbc\xc1\x42\xbe\x94\xc9\x9e\x59\xb6\x61\x15\x6e\xd9\xce\x7f\xc6\x38\xf2\x27\x24\x50\x75\xb2\x95\xaf\x98\xe2\x03\xe5\x88\x2b\x76\xdd\xeb\x6c\xe4\x05\x0e\x3d\x0b\x96\x12\x39\xb9\xf1\x75\xbf\x3b\x8d\x8b\x29\xb7\x0a\x69\x1d\x36\x0e\x48\x1f\xfe\x7f\x79\x3f\x80\x7a\xcf\xa8\x3a\xf6\x6a\xbf\xf2\x17\x4e\x55\x98\x2c\xc4\xf0\x1b\x0b\x99\xfc\x82\x17\xa6\x80\x0a\xb5\x53\xba\x51\x0b\xcc\xcf\x00\x00\x00\xff\xff\xfd\x95\x57\x19\xc7\x00\x00\x00")

func mapping_static_partials_analysis_tokenizers_regexp_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_analysis_tokenizers_regexp_html,
		"mapping_static/partials/analysis/tokenizers/regexp.html",
	)
}

func mapping_static_partials_analysis_tokenizers_regexp_html() (*asset, error) {
	bytes, err := mapping_static_partials_analysis_tokenizers_regexp_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/analysis/tokenizers/regexp.html", size: 199, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_analysis_tokenizers_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x54\xc1\x72\xda\x30\x10\xbd\xf3\x15\x3b\x3a\x25\x33\xb5\x99\x4e\xaf\xb6\x4f\xed\x35\xa7\xf4\x03\x84\xb5\xb1\x35\x08\x49\x23\xad\x43\xdc\x4c\xfe\xbd\x2b\x81\x8d\x81\xd4\x3d\xe5\x02\x4f\x6b\x76\xdf\x7b\x7a\x8b\x2b\x92\x3b\x83\xd0\x1a\x19\x63\x2d\x4e\x87\xfc\x59\x44\x0a\xda\xa3\x12\xcd\x06\xa0\xa2\x1e\xa5\x4a\x28\xe1\x70\x02\xb9\xdc\x3c\xc9\x03\x56\x5b\x06\x8b\xda\xf3\xe8\xef\x6a\x97\x33\xa3\x3c\x21\x55\xce\x53\x2b\xda\x39\x35\xce\xf3\xc1\x76\x45\x40\x8f\x92\x6a\xf1\x40\x96\x19\xbe\xd1\xab\x34\x8f\xa0\x2d\x1c\xa4\xf7\xda\x76\xa5\xb4\xd2\x8c\x51\xc7\x92\xdc\x1e\xad\xfe\x83\x21\x8a\x0b\x9f\x6a\xde\xdf\x73\xe3\xc7\x07\xd3\xa8\x9b\x07\x3c\xab\x24\xd6\x78\xff\xf0\x0c\xf9\xa0\xf4\xeb\x74\x2b\x3b\xb2\x45\x17\xdc\xe0\x61\x46\xc5\x5b\x14\x10\x9c\xc1\x5a\xe4\xb3\xb8\x74\x72\xef\x6e\x20\x72\x36\xb9\x68\x8d\x6e\xf7\xb5\x40\xa5\xe9\x79\xd2\x79\x76\x04\xd9\x92\x80\x24\x84\x39\x72\x8b\x58\x50\x66\x32\x85\x2f\x72\x30\x94\xf1\x5b\xbc\x62\x61\x9e\xe8\xa5\x9d\x3a\x3a\x33\xfa\x5e\xb7\x4c\x3b\xa3\x22\xd1\x0a\x90\x41\xcb\xa2\xd7\x4a\xa1\xe5\x84\xc3\x80\x82\xc3\x48\xad\x0d\xfc\xe2\x1f\x2c\x85\x6f\x4f\x32\xd6\xcd\x28\x34\x48\x78\x63\xe7\x6b\x8d\x50\x90\xb1\x5f\x75\xf2\x33\x8b\x5a\xf5\x52\x6d\x39\xd3\x39\xec\x39\xf8\x69\x1d\xe7\xcd\x8b\xbd\x3b\xd6\xe2\x37\x69\x13\xcb\x3d\x8e\xf1\x61\x65\xe5\x1e\x4b\x83\xb6\xa3\x1e\x2a\xf8\xbe\x5c\x3f\x68\x9d\x49\xc2\x6a\xf1\x43\x34\x4f\xce\xe2\x3d\x1f\x7f\x4f\x4b\x5f\xd1\x8b\x73\xf4\xc9\xdf\xeb\x7a\xce\xe6\xdf\x99\x58\x3c\x5e\x02\xf9\x5f\x16\xf1\x70\x15\x89\x1f\x8c\x29\x82\xee\x7a\x62\xa9\x78\x84\x79\xd0\xed\x15\x7e\xea\xe1\xa4\x9c\x41\x7a\x69\x34\x9b\xcd\xdf\x00\x00\x00\xff\xff\xff\x9a\x4c\x03\x51\x04\x00\x00")

func mapping_static_partials_analysis_tokenizers_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_analysis_tokenizers_html,
		"mapping_static/partials/analysis/tokenizers.html",
	)
}

func mapping_static_partials_analysis_tokenizers_html() (*asset, error) {
	bytes, err := mapping_static_partials_analysis_tokenizers_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/analysis/tokenizers.html", size: 1105, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_analysis_wordlist_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x94\x41\x4f\xdc\x30\x10\x85\xcf\xbb\xbf\x62\xe4\x13\x48\x4d\xa3\x8a\x56\xea\x21\x1b\xa9\xe2\xda\x72\x68\x0f\x3d\x3b\xf1\x90\x58\x4c\xec\xc8\x76\x80\x2d\xe2\xbf\x77\x6c\x6f\x76\x13\x56\x50\x8a\x44\xe2\x1d\x3f\x3f\x7f\xcf\x63\xa5\x52\xfa\x1e\x5a\x92\xde\xef\xc4\x60\x95\xa4\xa2\x47\xa9\xd0\x89\x7a\x0b\xfc\x57\xf5\x57\xeb\xd9\xa0\x03\xa1\xa8\xaf\x27\x1f\xec\x00\xbf\xad\x53\xf0\x5d\xfb\x50\x95\xfd\x55\xbd\xad\x4a\x76\xe3\xd7\x99\x67\x63\xd5\x9e\x1d\xb7\x9b\x34\x65\xba\xc2\xf7\xf6\x61\x27\xd0\x39\xeb\x7e\xa0\xf7\xb2\x43\x31\xaf\x90\x84\x2e\x40\x7a\x16\x4a\x9a\x0e\x5d\x5c\xd0\x92\x95\x77\x02\x9c\x25\x3c\x48\x44\x0d\x4f\x4f\x4b\x87\xe7\x67\xf6\xcf\x04\x3c\xb8\xb5\x6e\x98\x2d\xe3\x78\x5e\x9b\xc6\xf5\x76\xb3\x59\x52\xc6\x62\xd1\x39\x3b\x8d\x69\x6a\x53\x91\x6c\x90\x80\xcb\x3b\x11\x8c\x1c\x38\xf1\x0d\x3f\xab\x32\xd5\xb3\x44\x9b\x71\x0a\x11\x8d\x23\x22\xed\x44\x92\x41\xd8\x8f\xbc\x49\xc0\xc7\x20\x56\xe6\xad\x35\x81\x01\x04\x68\x35\x5b\xc2\x48\xb2\xc5\xde\x12\x1f\xf7\x4e\xdc\xa4\x5d\x22\xd7\x1c\xe1\xdd\x84\x0f\xdc\x05\x2f\xea\xd8\x0c\xbf\x42\xf4\x48\xd8\x2e\x19\x73\x01\x55\x92\x0a\x18\x26\x0a\x7a\x24\x4c\x8a\xc3\x98\xe9\xdc\x84\x99\x33\x1b\x83\xd7\x7f\xb8\xfc\xe5\x95\x40\xbc\xd6\x8e\x41\x5b\xc3\x33\x5a\x3d\x82\xf4\x10\xd7\x45\x34\xb8\xe0\xc2\x87\xf4\xf3\x12\xb4\x81\x03\x68\x62\x2b\x33\xcb\x2a\x71\xba\x71\xaf\x86\x8e\xb3\xeb\xdc\xbd\xe4\x5b\x70\x4a\x0c\x90\x25\x0b\x87\xd6\x52\xe1\x87\xe2\xab\x38\x4e\x47\xc1\x59\xeb\xf0\x21\x9e\xc8\x3b\xbb\x77\x54\xaf\xfa\x17\xb3\x89\x05\x44\xce\xf4\x06\xd3\xe7\x85\x7a\x53\x35\x53\x08\xd6\xe4\x9b\xae\xdb\x3b\xbe\xe3\x2a\x75\xe9\xe2\x72\xa6\xca\x8a\x23\x57\x13\x0c\xf0\x3f\x3b\xa5\x97\xc2\x5b\xc9\x1d\x14\xf5\x37\xa5\xaa\x32\x6b\xdf\xf4\x77\x38\xd8\x7b\x9c\xb7\xe0\xba\xd2\x5e\x36\x84\xea\xc5\x2d\xf9\x48\x68\xba\xd0\x43\x05\x9f\xfe\x8b\x04\xc6\x89\xa8\x70\xba\xeb\x19\xea\x67\xda\x6c\xc5\x75\x6c\xfb\xa2\xff\x55\x19\x4f\x9b\x47\x73\xe5\xfc\x4b\x72\x6b\x6d\x38\x7d\x9d\x0e\xa9\x5e\x80\xcc\x67\xb1\x48\xdb\x4a\xd3\x22\x71\xd2\xfa\x3a\x8d\x4e\x28\x4b\x9f\x93\xbe\x99\x34\xfd\xfb\xec\x47\xa7\x07\xe9\xf6\xab\xa8\xbf\xe4\x32\x68\x0e\xf2\x37\x00\x00\xff\xff\xb7\x08\xb7\xa6\x65\x05\x00\x00")

func mapping_static_partials_analysis_wordlist_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_analysis_wordlist_html,
		"mapping_static/partials/analysis/wordlist.html",
	)
}

func mapping_static_partials_analysis_wordlist_html() (*asset, error) {
	bytes, err := mapping_static_partials_analysis_wordlist_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/analysis/wordlist.html", size: 1381, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_analysis_wordlists_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x54\xc1\x6e\x9c\x30\x10\xbd\xf3\x15\x23\x9f\x12\xa9\xb0\x6a\xcf\xc0\xa9\xbd\x55\xb9\x55\x3d\x56\x06\x4f\xc0\x5a\x63\x5b\xf6\x90\x0d\x8a\xf2\xef\x1d\x43\x60\xd9\x34\xa5\xa7\x5e\x76\xdf\x0c\x9e\x79\x6f\xfc\x06\x4a\x92\x8d\x41\x68\x8d\x8c\xb1\x12\x4b\x30\xff\xe6\x91\x82\xf6\xa8\x44\x9d\x01\x94\xd4\xa3\x54\x09\x25\x1c\x16\x30\xa7\xeb\x07\x39\x60\x79\x62\xb0\xcb\x5d\x63\x46\xf3\xe9\x94\x79\xeb\x50\x52\xe3\xd4\xb4\xf5\x02\xdb\xe5\x01\x3d\x4a\xaa\xc4\x1d\x0d\x96\xdb\x7d\xa2\xe1\x49\x9a\x7b\xd0\x16\x06\xe9\xbd\xb6\x5d\x21\xad\x34\x53\xd4\xb1\x20\x77\x46\xfb\x8b\xd3\x51\x5c\x19\x55\xfd\xf2\xb2\x94\xbe\xbe\x32\x93\xda\x3f\x79\x83\x1c\x28\xfd\xb4\xce\xd9\x90\xcd\xbb\xe0\x46\x0f\x1b\xca\x9f\xa3\x80\xe0\x0c\x56\x62\x8e\xc5\xb5\x92\x6b\x9b\x91\xc8\xd9\xa4\xb5\x35\xba\x3d\x57\x02\x95\xa6\x9f\x2e\xa8\xef\x3a\xd2\x2a\x1b\x16\xdd\x02\x68\xf2\xdc\x66\xa9\x11\x3b\xce\x99\x4d\xe1\xa3\x1c\x0d\xcd\xf8\x39\xde\xd0\x30\x51\xf4\xd2\xae\x15\x9d\x99\x7c\xaf\x5b\xe6\xdd\x50\x9e\x78\x05\xc8\xa0\x65\xde\x6b\xa5\xd0\xb2\x69\x61\x44\xc1\x77\x9e\x4a\x6b\xf8\xc6\x07\xf6\xca\x4f\x8b\x8c\xe3\x69\x14\x1a\x24\x7c\x37\xcf\xff\x1d\x84\x82\x8c\xfd\xe1\x24\x5f\x67\x51\x87\xb3\x94\x27\x36\x75\x73\x7b\x73\x7e\xdd\xba\x6d\xc1\x62\xef\x2e\x95\xf8\x41\xda\xc4\xe2\x8c\x53\xbc\x3b\xd8\xab\xfb\xc2\xa0\xed\xa8\x87\x12\x3e\xef\x77\x0c\x5a\x67\x92\xb0\x4a\x7c\x11\xf5\x83\xb3\xf8\x27\x1f\xff\xaf\xbb\x5d\xd2\xa3\x73\xf4\xc1\x1b\x73\xdb\x27\xfb\xbb\x27\x16\x2f\x9b\x21\xff\xb2\x22\x0e\x37\x8e\xf8\xd1\x98\x3c\xe8\xae\x27\x56\x8a\x17\x48\x7d\x20\x35\x7a\x7f\x83\x1f\x8e\xb0\x08\x67\x90\x3e\x03\x75\x96\xfd\x0e\x00\x00\xff\xff\x28\x98\x90\x90\x23\x04\x00\x00")

func mapping_static_partials_analysis_wordlists_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_analysis_wordlists_html,
		"mapping_static/partials/analysis/wordlists.html",
	)
}

func mapping_static_partials_analysis_wordlists_html() (*asset, error) {
	bytes, err := mapping_static_partials_analysis_wordlists_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/analysis/wordlists.html", size: 1059, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_mapping_mapping_custom_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x56\x5d\x6b\xec\x36\x10\x7d\xbe\xf9\x15\xaa\x1f\xd6\x09\x5c\xaf\x6f\xb9\xd0\x87\xc6\x5e\x48\xb9\x14\x02\xa5\x2d\x24\xf4\xa5\x94\x45\x6b\x29\x6b\xf5\xca\x92\x91\xc6\xd9\xa4\x21\xff\xbd\x23\xd9\xde\xf5\x77\x92\x7e\x53\x43\xe2\xf5\xe8\x8c\x74\x66\x74\x66\xa4\xb3\x84\x89\x7b\x92\x49\x6a\x6d\x1a\x18\x7d\x08\x36\x67\x04\x9f\xae\x35\xd3\x32\x2a\x58\xf4\x15\x0e\xf5\xd0\x25\x55\x5c\x12\xff\x3f\x62\xfc\x8e\x56\x12\xbc\xf7\x08\x13\xe5\x9c\x32\xa1\xf6\xed\xdc\xf9\xc7\xfe\x30\x08\x90\x3c\xd8\x24\x16\x3f\xdb\x91\xbd\x7c\x2c\x73\x91\x69\x45\x8e\xbf\xa2\x3b\x81\x30\x42\x8d\xa0\x51\x2e\x18\xe3\x2a\x0d\xc0\x54\xce\x33\x76\xae\x1b\xf2\x49\x67\x55\xc1\x15\x90\x1b\xb4\x67\x50\x19\x9e\xc4\xf9\x47\xcf\x29\x46\x52\xd3\xe4\x76\x9a\x3d\xba\xd0\x48\xf3\x24\x95\x6c\x01\x52\x58\x88\xb2\xca\x82\x2e\x1a\xee\xee\x79\xd7\x23\xea\x31\x02\x78\x11\x10\xb5\x8f\x32\x29\xb2\xcf\x98\x32\xf7\xba\x46\xe3\x79\x41\xcb\x12\x43\x5f\x37\x09\xda\x36\xdf\xef\x49\x98\xb0\x96\xad\xd1\x1a\x36\xe1\x45\x33\x81\x9f\xf5\xc9\x72\xc9\x33\xe0\xec\x6b\x32\x33\x43\x9a\xb6\x10\xb7\xce\x73\x87\x9f\x7b\x56\xbb\x4a\xca\x4b\xb2\x92\x70\xd9\x5b\x66\xb5\x87\xcb\x0e\xb0\x49\x5c\x27\xb4\x17\x83\x7f\x97\x48\xe1\x88\x1a\x5e\x72\x0a\x69\x70\x5e\x2a\x5a\xf0\xf7\xe5\x3d\x95\x17\x44\xa8\x39\xba\xeb\xd2\xe8\x92\x1b\x10\xdc\xfa\x38\x85\xca\x64\xc5\x78\x1a\x84\xb1\x05\x0a\x22\x8b\x4b\x8a\xa3\x54\xda\xb8\xf1\x68\xdf\x91\xd2\x8c\xaf\x73\x28\x64\xd8\x78\x0a\x70\x7b\x67\x5c\x4c\x29\xf1\xcb\x3b\x09\x48\xd1\x8d\x23\xae\xe4\xe9\xb3\xfe\x3a\x7d\x76\x34\x70\xa7\x4d\x11\xed\x8d\xae\x4a\x72\xfa\x19\xd9\xa2\x97\xcf\x61\x35\xd8\x22\xfa\xf2\xc3\x20\xe3\x89\x50\x65\x05\x8e\x60\x81\x7c\x65\x1a\x28\x7e\xf8\x56\x70\xc9\xbe\x77\xfc\x08\x3c\x96\x18\x2c\xf0\x07\x08\x7a\x4b\xa3\xae\xc1\x68\x19\x10\xc1\xd0\x72\xc2\x97\x92\x66\x3c\xd7\x92\x71\xd3\xd8\x49\x1d\x68\x6f\xf7\x1a\x51\x1f\x0d\xbb\x0a\x00\x4b\xe6\x24\x44\xca\x98\x27\x71\x0e\xb9\xb0\x17\x2d\x8d\x1a\x76\x24\xb2\x03\x45\xf0\x0f\xc3\xf2\xaf\x63\x2d\x5f\x31\x96\xc4\x35\xb6\x9b\x4b\xbf\xe8\x59\x8f\xc0\xa4\x71\xb6\x8b\x8c\x93\x3a\xd7\x4a\x66\x90\x83\x86\xd2\xa0\xfe\x68\x5b\x71\x42\x5f\x6c\x2b\xd7\x8a\xf1\x07\x5c\x8e\x7c\xc3\x73\x7a\x2f\xb4\x21\x89\x2d\xa8\x94\x9b\xa7\x63\x99\x7e\x47\x77\x5c\x3e\x3f\xa3\x87\x1f\x68\xdb\xce\xe4\x3e\xbd\xdc\x82\x1a\x0c\x6e\xa3\xcd\xf5\x21\x0d\xba\x95\x4e\xd2\x94\x28\x2c\xee\x60\x73\xe3\xad\x04\x83\x73\xed\xc7\xd5\x1e\xe4\x9c\x1c\xcb\xdd\xb6\x3d\x70\x3d\xd6\x49\x33\x3b\x86\xcb\xe7\x66\x3f\xeb\xab\xfb\xad\x25\xf3\xda\xb2\xf1\x38\xe9\xb2\xb7\xb9\x45\x6d\x8e\xc6\x70\xb4\xe6\xe7\x45\x9d\x53\xb5\x47\xc6\xf5\xdb\xe1\x5b\x5d\x9f\xca\xae\x1b\xcd\xda\x17\x8e\xfd\xf9\xc3\x2f\x6b\x27\x7c\x0f\xd3\x25\x08\xad\x90\x11\xac\x5d\x41\x11\x6a\x09\xac\x3d\x01\x17\x0d\x01\x97\x47\xef\xe6\xa6\xb7\x13\x6c\x3d\xa7\x7a\x16\x82\x4d\xaf\x42\x3e\xc1\xe6\x87\xdd\xaf\xb8\x6a\x12\xd7\xf6\x29\x27\x94\x86\x67\x36\x11\x7e\x5c\xc7\x3f\xcc\xde\x70\xd7\x4e\x65\x36\xde\x1a\x27\x95\x83\x80\x2c\x5f\x4e\xc0\xe4\x0e\x1d\x7d\xa3\x43\xee\xc5\xef\x9a\xd4\x60\xff\x8f\xe0\xb7\x6a\x60\xe8\xb8\xa4\x03\x8f\xad\x73\x71\xa5\xa8\x7c\xfc\x8d\x9b\x49\xcc\x5f\xa5\x09\xda\x2c\x32\xd0\x85\x97\xc4\x49\x0c\x2d\xca\xf5\xe5\x39\x3d\x78\x4e\x43\x4d\x5c\xab\x9c\x1b\xb1\x28\x0a\xef\x37\x2b\x8c\x7a\x74\x52\x1c\xf5\xd0\x48\x20\x1d\xf3\xb4\x9a\x5e\xb3\xff\x8c\x02\x07\xe1\xcf\x9a\x7f\x55\x03\x9f\x90\x47\x7c\x8b\x44\x7e\xa4\xc6\xfe\xcd\x52\x70\x31\x6f\x5d\x14\x14\x96\xd5\xd0\x26\xa7\xe6\xf4\xbf\xd0\xc4\xa2\x69\xec\xd9\x6a\x46\xdc\x2d\xf6\x1a\xf2\x45\x4a\xc2\x90\xac\x56\xe4\x25\x10\x13\x96\xee\x24\x67\xe1\xd2\xa1\x93\xe5\x3c\xfb\xbc\xd3\x0f\xe3\x16\x36\x93\x8b\xd1\x7d\x6c\x86\x86\x70\x87\x7b\x7b\x31\x3a\xad\x52\x1f\xfa\xa3\x84\x4d\x2c\x36\x95\xdb\x7f\x84\x39\xde\xcc\x0d\x9f\x60\x7e\xe3\xec\xff\x69\xe6\xcd\xe5\x7f\x2b\xd4\x16\x6f\x4b\x93\xc9\xf7\x00\x57\x70\xe1\x95\x94\x21\xf1\x97\xd8\x3f\x15\xd3\x2b\x14\x8b\x77\x9f\xd0\x1d\x7e\x23\x21\xbe\x32\x2d\xf3\x89\x79\x7b\x6a\x80\x9b\x62\x7b\x8f\x08\x6d\xec\x42\x82\x6e\x11\x46\x7e\xaa\x61\x6f\xbc\x58\xbc\x90\xb6\xa1\xa5\xd7\x19\xba\x77\xfc\x06\xd7\xbc\x7f\x0f\x00\x00\xff\xff\xe4\xdb\x4e\x51\x50\x10\x00\x00")

func mapping_static_partials_mapping_mapping_custom_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_mapping_mapping_custom_html,
		"mapping_static/partials/mapping/mapping-custom.html",
	)
}

func mapping_static_partials_mapping_mapping_custom_html() (*asset, error) {
	bytes, err := mapping_static_partials_mapping_mapping_custom_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/mapping/mapping-custom.html", size: 4176, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_mapping_mapping_node_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x8f\x3b\x4e\xc5\x30\x10\x45\xeb\xbc\x55\x8c\x5c\xf0\x5e\x44\x3e\x3d\xd8\xee\x59\x86\x31\x23\x34\x62\xe2\x58\xfe\xd0\x44\xd9\x3b\xf6\x00\x05\x42\x74\x34\xfe\x69\xee\xb9\x3e\x3a\x47\x17\x00\x3c\xbb\x9c\x8d\x62\xca\x65\xa6\x82\x9b\x0a\xaf\xb3\x67\xf2\x6f\x46\xc9\xf6\xd4\xde\x6e\xf1\xdd\xf1\x14\x83\xdb\x70\x54\x20\x03\x12\x3a\x32\x32\xfa\x82\x2f\x0f\xd0\x27\x8c\xf9\xbe\xf7\xd0\xa9\xec\xdd\x73\x65\x7e\x84\xe3\x90\xe8\x79\xea\xb5\x77\xda\x8b\xae\xfc\xa3\xd7\xd7\x5c\xf6\x4d\xd9\xcb\xa0\x99\x3a\x3f\x61\x44\x57\x8c\xba\x49\x70\xea\xf0\x11\x28\x48\xcb\x12\xd3\x1e\x31\x15\xc2\x2c\x7f\xa1\x40\x6d\x32\xba\x84\xa1\x80\x81\xaf\xc3\x3d\x5c\x97\x6b\x5b\x05\xd0\xc9\xc3\xa7\xef\x2f\x5d\xf8\xdb\x57\x48\xff\x22\x3c\xe8\x95\xa9\x79\xaf\x95\xed\x47\x00\x00\x00\xff\xff\x21\xb8\x41\xa1\x78\x01\x00\x00")

func mapping_static_partials_mapping_mapping_node_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_mapping_mapping_node_html,
		"mapping_static/partials/mapping/mapping-node.html",
	)
}

func mapping_static_partials_mapping_mapping_node_html() (*asset, error) {
	bytes, err := mapping_static_partials_mapping_mapping_node_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/mapping/mapping-node.html", size: 376, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapping_static_partials_mapping_mapping_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x94\x4f\x6f\xdb\x30\x0c\xc5\xef\xf9\x14\x84\x0e\xcb\xc9\xf3\xb6\xeb\xec\x00\x43\x8a\x01\x03\xd6\x5b\x81\x9d\x19\x99\xb1\x85\xd0\x92\x21\xc9\xed\xda\xa2\xdf\x7d\xf4\xbf\xc4\xde\x1f\x2c\x6d\x36\x34\x07\x47\x26\xe5\xf7\x7e\x7e\xa1\xb2\x5a\x65\x85\xb9\x05\x5b\x26\xa1\x72\x77\xb9\x22\xef\x9d\xbf\xa6\x10\xb0\x24\x05\x9a\x31\x84\x5c\x21\x93\x8f\xd0\x5f\x93\x02\x6d\x49\xbe\x7b\x40\xb3\xc3\x83\x02\xef\x98\xc6\x2d\x6a\x03\x8f\x8f\x73\x85\xa7\xa7\x55\x96\x8a\xfe\x46\x6c\xf6\xce\xd7\x93\x60\xb7\x4e\x2a\xe7\xcd\x83\xb3\x11\x79\x12\xe9\xca\x4a\xf6\x02\xf4\x50\xf3\xcd\xa5\x77\x6d\x23\x3d\x90\x4f\xc6\xb8\x23\x06\xa9\xe7\xca\xd8\xa6\x8d\x57\x4e\x1f\x59\xb5\xe3\x24\xd4\xc9\x07\xd0\x22\x2d\xb2\x49\xbf\x59\x6d\xbe\xd8\x82\xbe\xc3\x35\x36\x8d\xb1\x65\x96\xf6\x55\xb1\x1a\x04\x67\x6e\xe3\xf3\xef\xdf\x8d\x66\xcb\xae\xc7\xc2\xb8\x63\x67\x42\x39\xdd\x4b\xa5\x27\xea\xf2\xa9\x5d\x41\x9c\xab\x7a\xb0\xbc\xb9\x6f\x24\xd0\x28\xd7\x49\x05\x2c\xd6\xf4\x53\xff\x16\xb9\x95\x5a\x41\x7b\x6c\x39\xca\x4b\x55\xa4\x0f\x54\xcc\x0d\xae\x86\xde\x09\x21\x5d\x30\x8c\x79\xbf\x1a\xba\x6e\x43\x74\xb5\x9a\xeb\x6e\xfb\xd2\x19\xc0\xd3\xac\x2c\x56\xbf\x9f\x84\xd3\xc4\xce\x20\x20\xcf\x61\x3d\x00\xac\x2f\x99\x95\x37\x76\x17\x9a\x8f\x0b\xce\x33\x46\x44\x88\x8c\xd5\xdc\x16\x04\xc1\xeb\x5c\xad\xd3\x10\x31\x1a\x9d\x36\xe8\xa3\x41\x0e\xe9\x88\x3a\x7d\x27\x03\xea\xdb\x2a\xd6\xbc\x56\xe9\x22\x83\x33\x23\x18\xc1\xe5\xf0\xe5\xea\x93\x45\xbe\x0f\x26\x6c\xa3\xe7\xff\x9b\xcf\xf0\x83\xc2\x64\xf8\x9c\xa0\x22\xee\x02\xc5\xd9\x14\x4a\x01\x2a\x92\xa9\xb2\xe5\xf8\x0a\x0f\xe4\xc3\x62\x7e\xce\x4c\x17\x47\x9c\x61\xd1\xa9\x2c\x93\x1d\xd2\x15\xbf\x3f\xb9\x6f\x2b\xf4\xa8\xa3\xfc\xbb\x7d\x36\x1c\x2f\xa5\xd0\xa2\xb6\x1f\x74\x9e\xc9\x71\xe3\x0e\x64\xcd\xc5\x31\xc4\xa3\xcc\x4b\xfc\xff\x49\x06\x3d\xc2\xcb\x42\xf8\xe6\x7c\x01\x5f\x4d\x88\x97\x11\xdc\x89\x0c\x77\x2a\x7f\xb1\xef\x6f\x8e\x93\xf9\xcb\x21\xcc\xd2\xee\xe0\x6d\x7e\x04\x00\x00\xff\xff\x78\xe4\xf1\x09\x2e\x07\x00\x00")

func mapping_static_partials_mapping_mapping_html_bytes() ([]byte, error) {
	return bindata_read(
		_mapping_static_partials_mapping_mapping_html,
		"mapping_static/partials/mapping/mapping.html",
	)
}

func mapping_static_partials_mapping_mapping_html() (*asset, error) {
	bytes, err := mapping_static_partials_mapping_mapping_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "mapping_static/partials/mapping/mapping.html", size: 1838, mode: os.FileMode(420), modTime: time.Unix(1431973150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mapping_static/js/mapping/analysis-analyzer.js":                       mapping_static_js_mapping_analysis_analyzer_js,
	"mapping_static/js/mapping/analysis-charfilter.js":                     mapping_static_js_mapping_analysis_charfilter_js,
	"mapping_static/js/mapping/analysis-tokenfilter.js":                    mapping_static_js_mapping_analysis_tokenfilter_js,
	"mapping_static/js/mapping/analysis-tokenizer.js":                      mapping_static_js_mapping_analysis_tokenizer_js,
	"mapping_static/js/mapping/analysis-wordlist.js":                       mapping_static_js_mapping_analysis_wordlist_js,
	"mapping_static/js/mapping/analysis.js":                                mapping_static_js_mapping_analysis_js,
	"mapping_static/js/mapping/mapping.js":                                 mapping_static_js_mapping_mapping_js,
	"mapping_static/partials/analysis/analyzer.html":                       mapping_static_partials_analysis_analyzer_html,
	"mapping_static/partials/analysis/analyzers.html":                      mapping_static_partials_analysis_analyzers_html,
	"mapping_static/partials/analysis/charfilter.html":                     mapping_static_partials_analysis_charfilter_html,
	"mapping_static/partials/analysis/charfilters/generic.html":            mapping_static_partials_analysis_charfilters_generic_html,
	"mapping_static/partials/analysis/charfilters/regexp.html":             mapping_static_partials_analysis_charfilters_regexp_html,
	"mapping_static/partials/analysis/charfilters.html":                    mapping_static_partials_analysis_charfilters_html,
	"mapping_static/partials/analysis/tokenfilter.html":                    mapping_static_partials_analysis_tokenfilter_html,
	"mapping_static/partials/analysis/tokenfilters/dict_compound.html":     mapping_static_partials_analysis_tokenfilters_dict_compound_html,
	"mapping_static/partials/analysis/tokenfilters/edge_ngram.html":        mapping_static_partials_analysis_tokenfilters_edge_ngram_html,
	"mapping_static/partials/analysis/tokenfilters/elision.html":           mapping_static_partials_analysis_tokenfilters_elision_html,
	"mapping_static/partials/analysis/tokenfilters/generic.html":           mapping_static_partials_analysis_tokenfilters_generic_html,
	"mapping_static/partials/analysis/tokenfilters/keyword_marker.html":    mapping_static_partials_analysis_tokenfilters_keyword_marker_html,
	"mapping_static/partials/analysis/tokenfilters/length.html":            mapping_static_partials_analysis_tokenfilters_length_html,
	"mapping_static/partials/analysis/tokenfilters/ngram.html":             mapping_static_partials_analysis_tokenfilters_ngram_html,
	"mapping_static/partials/analysis/tokenfilters/normalize_unicode.html": mapping_static_partials_analysis_tokenfilters_normalize_unicode_html,
	"mapping_static/partials/analysis/tokenfilters/shingle.html":           mapping_static_partials_analysis_tokenfilters_shingle_html,
	"mapping_static/partials/analysis/tokenfilters/stop_tokens.html":       mapping_static_partials_analysis_tokenfilters_stop_tokens_html,
	"mapping_static/partials/analysis/tokenfilters/truncate_token.html":    mapping_static_partials_analysis_tokenfilters_truncate_token_html,
	"mapping_static/partials/analysis/tokenfilters/wordmap.html":           mapping_static_partials_analysis_tokenfilters_wordmap_html,
	"mapping_static/partials/analysis/tokenfilters.html":                   mapping_static_partials_analysis_tokenfilters_html,
	"mapping_static/partials/analysis/tokenizer.html":                      mapping_static_partials_analysis_tokenizer_html,
	"mapping_static/partials/analysis/tokenizers/exception.html":           mapping_static_partials_analysis_tokenizers_exception_html,
	"mapping_static/partials/analysis/tokenizers/generic.html":             mapping_static_partials_analysis_tokenizers_generic_html,
	"mapping_static/partials/analysis/tokenizers/regexp.html":              mapping_static_partials_analysis_tokenizers_regexp_html,
	"mapping_static/partials/analysis/tokenizers.html":                     mapping_static_partials_analysis_tokenizers_html,
	"mapping_static/partials/analysis/wordlist.html":                       mapping_static_partials_analysis_wordlist_html,
	"mapping_static/partials/analysis/wordlists.html":                      mapping_static_partials_analysis_wordlists_html,
	"mapping_static/partials/mapping/mapping-custom.html":                  mapping_static_partials_mapping_mapping_custom_html,
	"mapping_static/partials/mapping/mapping-node.html":                    mapping_static_partials_mapping_mapping_node_html,
	"mapping_static/partials/mapping/mapping.html":                         mapping_static_partials_mapping_mapping_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mapping_static": &_bintree_t{nil, map[string]*_bintree_t{
		"js": &_bintree_t{nil, map[string]*_bintree_t{
			"mapping": &_bintree_t{nil, map[string]*_bintree_t{
				"analysis-analyzer.js":    &_bintree_t{mapping_static_js_mapping_analysis_analyzer_js, map[string]*_bintree_t{}},
				"analysis-charfilter.js":  &_bintree_t{mapping_static_js_mapping_analysis_charfilter_js, map[string]*_bintree_t{}},
				"analysis-tokenfilter.js": &_bintree_t{mapping_static_js_mapping_analysis_tokenfilter_js, map[string]*_bintree_t{}},
				"analysis-tokenizer.js":   &_bintree_t{mapping_static_js_mapping_analysis_tokenizer_js, map[string]*_bintree_t{}},
				"analysis-wordlist.js":    &_bintree_t{mapping_static_js_mapping_analysis_wordlist_js, map[string]*_bintree_t{}},
				"analysis.js":             &_bintree_t{mapping_static_js_mapping_analysis_js, map[string]*_bintree_t{}},
				"mapping.js":              &_bintree_t{mapping_static_js_mapping_mapping_js, map[string]*_bintree_t{}},
			}},
		}},
		"partials": &_bintree_t{nil, map[string]*_bintree_t{
			"analysis": &_bintree_t{nil, map[string]*_bintree_t{
				"analyzer.html":   &_bintree_t{mapping_static_partials_analysis_analyzer_html, map[string]*_bintree_t{}},
				"analyzers.html":  &_bintree_t{mapping_static_partials_analysis_analyzers_html, map[string]*_bintree_t{}},
				"charfilter.html": &_bintree_t{mapping_static_partials_analysis_charfilter_html, map[string]*_bintree_t{}},
				"charfilters": &_bintree_t{nil, map[string]*_bintree_t{
					"generic.html": &_bintree_t{mapping_static_partials_analysis_charfilters_generic_html, map[string]*_bintree_t{}},
					"regexp.html":  &_bintree_t{mapping_static_partials_analysis_charfilters_regexp_html, map[string]*_bintree_t{}},
				}},
				"charfilters.html": &_bintree_t{mapping_static_partials_analysis_charfilters_html, map[string]*_bintree_t{}},
				"tokenfilter.html": &_bintree_t{mapping_static_partials_analysis_tokenfilter_html, map[string]*_bintree_t{}},
				"tokenfilters": &_bintree_t{nil, map[string]*_bintree_t{
					"dict_compound.html":     &_bintree_t{mapping_static_partials_analysis_tokenfilters_dict_compound_html, map[string]*_bintree_t{}},
					"edge_ngram.html":        &_bintree_t{mapping_static_partials_analysis_tokenfilters_edge_ngram_html, map[string]*_bintree_t{}},
					"elision.html":           &_bintree_t{mapping_static_partials_analysis_tokenfilters_elision_html, map[string]*_bintree_t{}},
					"generic.html":           &_bintree_t{mapping_static_partials_analysis_tokenfilters_generic_html, map[string]*_bintree_t{}},
					"keyword_marker.html":    &_bintree_t{mapping_static_partials_analysis_tokenfilters_keyword_marker_html, map[string]*_bintree_t{}},
					"length.html":            &_bintree_t{mapping_static_partials_analysis_tokenfilters_length_html, map[string]*_bintree_t{}},
					"ngram.html":             &_bintree_t{mapping_static_partials_analysis_tokenfilters_ngram_html, map[string]*_bintree_t{}},
					"normalize_unicode.html": &_bintree_t{mapping_static_partials_analysis_tokenfilters_normalize_unicode_html, map[string]*_bintree_t{}},
					"shingle.html":           &_bintree_t{mapping_static_partials_analysis_tokenfilters_shingle_html, map[string]*_bintree_t{}},
					"stop_tokens.html":       &_bintree_t{mapping_static_partials_analysis_tokenfilters_stop_tokens_html, map[string]*_bintree_t{}},
					"truncate_token.html":    &_bintree_t{mapping_static_partials_analysis_tokenfilters_truncate_token_html, map[string]*_bintree_t{}},
					"wordmap.html":           &_bintree_t{mapping_static_partials_analysis_tokenfilters_wordmap_html, map[string]*_bintree_t{}},
				}},
				"tokenfilters.html": &_bintree_t{mapping_static_partials_analysis_tokenfilters_html, map[string]*_bintree_t{}},
				"tokenizer.html":    &_bintree_t{mapping_static_partials_analysis_tokenizer_html, map[string]*_bintree_t{}},
				"tokenizers": &_bintree_t{nil, map[string]*_bintree_t{
					"exception.html": &_bintree_t{mapping_static_partials_analysis_tokenizers_exception_html, map[string]*_bintree_t{}},
					"generic.html":   &_bintree_t{mapping_static_partials_analysis_tokenizers_generic_html, map[string]*_bintree_t{}},
					"regexp.html":    &_bintree_t{mapping_static_partials_analysis_tokenizers_regexp_html, map[string]*_bintree_t{}},
				}},
				"tokenizers.html": &_bintree_t{mapping_static_partials_analysis_tokenizers_html, map[string]*_bintree_t{}},
				"wordlist.html":   &_bintree_t{mapping_static_partials_analysis_wordlist_html, map[string]*_bintree_t{}},
				"wordlists.html":  &_bintree_t{mapping_static_partials_analysis_wordlists_html, map[string]*_bintree_t{}},
			}},
			"mapping": &_bintree_t{nil, map[string]*_bintree_t{
				"mapping-custom.html": &_bintree_t{mapping_static_partials_mapping_mapping_custom_html, map[string]*_bintree_t{}},
				"mapping-node.html":   &_bintree_t{mapping_static_partials_mapping_mapping_node_html, map[string]*_bintree_t{}},
				"mapping.html":        &_bintree_t{mapping_static_partials_mapping_mapping_html, map[string]*_bintree_t{}},
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
